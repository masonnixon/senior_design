
AURASCL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  00001736  000017ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001736  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  0080020e  0080020e  000018d8  2**0
                  ALLOC
  3 .debug_aranges 00000260  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000041f  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c6d  00000000  00000000  00001f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017f9  00000000  00000000  00004bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000190e  00000000  00000000  000063bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00007ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000551  00000000  00000000  00007f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d0c  00000000  00000000  000084dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000091e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_10>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e3       	ldi	r30, 0x36	; 54
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ae 30       	cpi	r26, 0x0E	; 14
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	ae e0       	ldi	r26, 0x0E	; 14
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 36       	cpi	r26, 0x6E	; 110
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 9a 01 	call	0x334	; 0x334 <main>
      9e:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_10>:

/***************************************************************************************************************
*                             TIMER1 INPUT CAPTURE ISR (ACCELEROMETER INPUT)
***************************************************************************************************************/
#if defined(__AVR_ATmega168__) || defined(__AVR_ATmega328__)
SIGNAL(TIMER1_CAPT_vect){
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	af 92       	push	r10
      b2:	bf 92       	push	r11
      b4:	cf 92       	push	r12
      b6:	df 92       	push	r13
      b8:	ef 92       	push	r14
      ba:	ff 92       	push	r15
      bc:	0f 93       	push	r16
      be:	1f 93       	push	r17
      c0:	2f 93       	push	r18
      c2:	3f 93       	push	r19
      c4:	4f 93       	push	r20
      c6:	5f 93       	push	r21
      c8:	6f 93       	push	r22
      ca:	7f 93       	push	r23
      cc:	8f 93       	push	r24
      ce:	9f 93       	push	r25
      d0:	af 93       	push	r26
      d2:	bf 93       	push	r27
      d4:	ef 93       	push	r30
      d6:	ff 93       	push	r31
	newTCNT1 = TCNT1;
      d8:	80 91 84 00 	lds	r24, 0x0084
      dc:	90 91 85 00 	lds	r25, 0x0085
      e0:	90 93 21 02 	sts	0x0221, r25
      e4:	80 93 20 02 	sts	0x0220, r24
	/* read the period of the accelerometer pwm signal (low byte first) */
	if ((TCCR1B & _BV(ICES1)) == _BV(ICES1)){// if currently rising edge triggered
      e8:	80 91 81 00 	lds	r24, 0x0081
      ec:	86 ff       	sbrs	r24, 6
      ee:	38 c0       	rjmp	.+112    	; 0x160 <__vector_10+0xba>
		AccPeriod = (long)newTCNT1 + (65535*Timer1OVcount) - (long)TLH;
      f0:	a0 90 20 02 	lds	r10, 0x0220
      f4:	b0 90 21 02 	lds	r11, 0x0221
      f8:	60 91 0e 02 	lds	r22, 0x020E
      fc:	70 91 0f 02 	lds	r23, 0x020F
     100:	e0 90 2a 02 	lds	r14, 0x022A
     104:	f0 90 2b 02 	lds	r15, 0x022B
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	2f ef       	ldi	r18, 0xFF	; 255
     10e:	3f ef       	ldi	r19, 0xFF	; 255
     110:	40 e0       	ldi	r20, 0x00	; 0
     112:	50 e0       	ldi	r21, 0x00	; 0
     114:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__mulsi3>
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	10 e0       	ldi	r17, 0x00	; 0
     11c:	6e 19       	sub	r22, r14
     11e:	7f 09       	sbc	r23, r15
     120:	80 0b       	sbc	r24, r16
     122:	91 0b       	sbc	r25, r17
     124:	cc 24       	eor	r12, r12
     126:	dd 24       	eor	r13, r13
     128:	a6 0e       	add	r10, r22
     12a:	b7 1e       	adc	r11, r23
     12c:	c8 1e       	adc	r12, r24
     12e:	d9 1e       	adc	r13, r25
     130:	a0 92 22 02 	sts	0x0222, r10
     134:	b0 92 23 02 	sts	0x0223, r11
     138:	c0 92 24 02 	sts	0x0224, r12
     13c:	d0 92 25 02 	sts	0x0225, r13
		TLH = newTCNT1;
     140:	80 91 20 02 	lds	r24, 0x0220
     144:	90 91 21 02 	lds	r25, 0x0221
     148:	90 93 2b 02 	sts	0x022B, r25
     14c:	80 93 2a 02 	sts	0x022A, r24
		Timer1OVcount = 0;	// clear the overflow counter
     150:	10 92 0f 02 	sts	0x020F, r1
     154:	10 92 0e 02 	sts	0x020E, r1
		/* switch to falling edge triggered interrupts */
		TCCR1B &= ~_BV(ICES1);		/* Switch to falling edge triggered interrupt */
     158:	80 91 81 00 	lds	r24, 0x0081
     15c:	8f 7b       	andi	r24, 0xBF	; 191
     15e:	2b c0       	rjmp	.+86     	; 0x1b6 <__vector_10+0x110>
	}
	else{
		/* read the pulse width (time high) of the accelerometer pwm signal (low byte first) */
		AccPulseWidth = (long)newTCNT1 + (65535*Timer1OVcount) - (long)TLH;
     160:	a0 90 20 02 	lds	r10, 0x0220
     164:	b0 90 21 02 	lds	r11, 0x0221
     168:	60 91 0e 02 	lds	r22, 0x020E
     16c:	70 91 0f 02 	lds	r23, 0x020F
     170:	e0 90 2a 02 	lds	r14, 0x022A
     174:	f0 90 2b 02 	lds	r15, 0x022B
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	2f ef       	ldi	r18, 0xFF	; 255
     17e:	3f ef       	ldi	r19, 0xFF	; 255
     180:	40 e0       	ldi	r20, 0x00	; 0
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__mulsi3>
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	10 e0       	ldi	r17, 0x00	; 0
     18c:	6e 19       	sub	r22, r14
     18e:	7f 09       	sbc	r23, r15
     190:	80 0b       	sbc	r24, r16
     192:	91 0b       	sbc	r25, r17
     194:	cc 24       	eor	r12, r12
     196:	dd 24       	eor	r13, r13
     198:	a6 0e       	add	r10, r22
     19a:	b7 1e       	adc	r11, r23
     19c:	c8 1e       	adc	r12, r24
     19e:	d9 1e       	adc	r13, r25
     1a0:	a0 92 26 02 	sts	0x0226, r10
     1a4:	b0 92 27 02 	sts	0x0227, r11
     1a8:	c0 92 28 02 	sts	0x0228, r12
     1ac:	d0 92 29 02 	sts	0x0229, r13
		/* switch to rising edge triggered interrupts */
		TCCR1B |= _BV(ICES1);
     1b0:	80 91 81 00 	lds	r24, 0x0081
     1b4:	80 64       	ori	r24, 0x40	; 64
     1b6:	80 93 81 00 	sts	0x0081, r24
	/* Toggle the test pin
	if ((PORTD & _BV(PD7)) == _BV(PD7))
		PORTD &= ~_BV(PD7);
	else
		PORTD |= _BV(PD7); */
}
     1ba:	ff 91       	pop	r31
     1bc:	ef 91       	pop	r30
     1be:	bf 91       	pop	r27
     1c0:	af 91       	pop	r26
     1c2:	9f 91       	pop	r25
     1c4:	8f 91       	pop	r24
     1c6:	7f 91       	pop	r23
     1c8:	6f 91       	pop	r22
     1ca:	5f 91       	pop	r21
     1cc:	4f 91       	pop	r20
     1ce:	3f 91       	pop	r19
     1d0:	2f 91       	pop	r18
     1d2:	1f 91       	pop	r17
     1d4:	0f 91       	pop	r16
     1d6:	ff 90       	pop	r15
     1d8:	ef 90       	pop	r14
     1da:	df 90       	pop	r13
     1dc:	cf 90       	pop	r12
     1de:	bf 90       	pop	r11
     1e0:	af 90       	pop	r10
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	0f 90       	pop	r0
     1e8:	1f 90       	pop	r1
     1ea:	18 95       	reti

000001ec <__vector_13>:
SIGNAL(TIMER1_OVF_vect){
     1ec:	1f 92       	push	r1
     1ee:	0f 92       	push	r0
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	0f 92       	push	r0
     1f4:	11 24       	eor	r1, r1
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
	Timer1OVcount++;
     1fa:	80 91 0e 02 	lds	r24, 0x020E
     1fe:	90 91 0f 02 	lds	r25, 0x020F
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	90 93 0f 02 	sts	0x020F, r25
     208:	80 93 0e 02 	sts	0x020E, r24
}
     20c:	9f 91       	pop	r25
     20e:	8f 91       	pop	r24
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <accelerometerIn>:
#endif

/***************************************************************************************************************
*                           			ACCELEROMETER PROCESSING FUNCTION
***************************************************************************************************************/
float accelerometerIn(void)	{
     21a:	af 92       	push	r10
     21c:	bf 92       	push	r11
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
	float retVal;
	float a,b,c;
	cli();	// disable interrupts
     22a:	f8 94       	cli

	// convert the pulse width into acceleration
	// accelY is in milli-g's....earth's gravity is 1000 milli-g's, or 1g.
	a=(float)AccPulseWidth;
     22c:	60 91 26 02 	lds	r22, 0x0226
     230:	70 91 27 02 	lds	r23, 0x0227
     234:	80 91 28 02 	lds	r24, 0x0228
     238:	90 91 29 02 	lds	r25, 0x0229
	b=(float)AccPeriod;
     23c:	a0 90 22 02 	lds	r10, 0x0222
     240:	b0 90 23 02 	lds	r11, 0x0223
     244:	c0 90 24 02 	lds	r12, 0x0224
     248:	d0 90 25 02 	lds	r13, 0x0225
	c=a/b;
	retVal = (c - 0.5) * 8.0;	// outputs a number between -4 and 4
	//retVal = (((AccPulseWidth_local*1000L / AccPeriod_local) - 500L) * 8L);

	sei();	// enable interrupts
     24c:	78 94       	sei
     24e:	0e 94 ae 08 	call	0x115c	; 0x115c <__floatunsisf>
     252:	7b 01       	movw	r14, r22
     254:	8c 01       	movw	r16, r24
     256:	c6 01       	movw	r24, r12
     258:	b5 01       	movw	r22, r10
     25a:	0e 94 ae 08 	call	0x115c	; 0x115c <__floatunsisf>
     25e:	9b 01       	movw	r18, r22
     260:	ac 01       	movw	r20, r24
     262:	c8 01       	movw	r24, r16
     264:	b7 01       	movw	r22, r14
     266:	0e 94 c0 06 	call	0xd80	; 0xd80 <__divsf3>
     26a:	20 e0       	ldi	r18, 0x00	; 0
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	5f e3       	ldi	r21, 0x3F	; 63
     272:	0e 94 68 05 	call	0xad0	; 0xad0 <__subsf3>
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	51 e4       	ldi	r21, 0x41	; 65
     27e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__mulsf3>
	return retVal;
}
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	df 90       	pop	r13
     28c:	cf 90       	pop	r12
     28e:	bf 90       	pop	r11
     290:	af 90       	pop	r10
     292:	08 95       	ret

00000294 <accelerometerSmoothed>:

float accelerometerSmoothed(float accumulator[], int *accel_accum) {
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	8c 01       	movw	r16, r24
     2a2:	7b 01       	movw	r14, r22
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
	int i=0;
	float maf;
	float sum=0;
	
	for(i=0;i<=(MAFSIZE-2);i++){
	  accumulator[i]=accumulator[i+1]; //Shift out the oldest
     2aa:	84 81       	ldd	r24, Z+4	; 0x04
     2ac:	95 81       	ldd	r25, Z+5	; 0x05
     2ae:	a6 81       	ldd	r26, Z+6	; 0x06
     2b0:	b7 81       	ldd	r27, Z+7	; 0x07
     2b2:	81 93       	st	Z+, r24
     2b4:	91 93       	st	Z+, r25
     2b6:	a1 93       	st	Z+, r26
     2b8:	b1 93       	st	Z+, r27
float accelerometerSmoothed(float accumulator[], int *accel_accum) {
	int i=0;
	float maf;
	float sum=0;
	
	for(i=0;i<=(MAFSIZE-2);i++){
     2ba:	2f 5f       	subi	r18, 0xFF	; 255
     2bc:	3f 4f       	sbci	r19, 0xFF	; 255
     2be:	2b 30       	cpi	r18, 0x0B	; 11
     2c0:	31 05       	cpc	r19, r1
     2c2:	99 f7       	brne	.-26     	; 0x2aa <accelerometerSmoothed+0x16>
	  accumulator[i]=accumulator[i+1]; //Shift out the oldest
	}
	accumulator[MAFSIZE-1]=accelerometerIn(); //Retrieve most recent noisy data point
     2c4:	0e 94 0d 01 	call	0x21a	; 0x21a <accelerometerIn>
     2c8:	f8 01       	movw	r30, r16
     2ca:	64 a7       	std	Z+44, r22	; 0x2c
     2cc:	75 a7       	std	Z+45, r23	; 0x2d
     2ce:	86 a7       	std	Z+46, r24	; 0x2e
     2d0:	97 a7       	std	Z+47, r25	; 0x2f
     2d2:	20 e0       	ldi	r18, 0x00	; 0
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	40 e0       	ldi	r20, 0x00	; 0
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	c0 e0       	ldi	r28, 0x00	; 0
     2dc:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(i=0;i<=(MAFSIZE-1);i++){
	  sum+=accumulator[i]; //Sum of 5 terms
     2de:	f8 01       	movw	r30, r16
     2e0:	ec 0f       	add	r30, r28
     2e2:	fd 1f       	adc	r31, r29
     2e4:	ca 01       	movw	r24, r20
     2e6:	b9 01       	movw	r22, r18
     2e8:	20 81       	ld	r18, Z
     2ea:	31 81       	ldd	r19, Z+1	; 0x01
     2ec:	42 81       	ldd	r20, Z+2	; 0x02
     2ee:	53 81       	ldd	r21, Z+3	; 0x03
     2f0:	0e 94 99 05 	call	0xb32	; 0xb32 <__addsf3>
     2f4:	9b 01       	movw	r18, r22
     2f6:	ac 01       	movw	r20, r24
     2f8:	24 96       	adiw	r28, 0x04	; 4
	for(i=0;i<=(MAFSIZE-2);i++){
	  accumulator[i]=accumulator[i+1]; //Shift out the oldest
	}
	accumulator[MAFSIZE-1]=accelerometerIn(); //Retrieve most recent noisy data point
	
	for(i=0;i<=(MAFSIZE-1);i++){
     2fa:	c0 33       	cpi	r28, 0x30	; 48
     2fc:	d1 05       	cpc	r29, r1
     2fe:	79 f7       	brne	.-34     	; 0x2de <accelerometerSmoothed+0x4a>
	  sum+=accumulator[i]; //Sum of 5 terms
	}
	
	maf=sum/MAFSIZE; //Average of the 5 data points
	*accel_accum+=1; //Increment through first 5 points
     300:	f7 01       	movw	r30, r14
     302:	80 81       	ld	r24, Z
     304:	91 81       	ldd	r25, Z+1	; 0x01
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	80 83       	st	Z, r24
	if(*accel_accum<MAFSIZE){
     30c:	0c 97       	sbiw	r24, 0x0c	; 12
     30e:	4c f0       	brlt	.+18     	; 0x322 <accelerometerSmoothed+0x8e>
	
	for(i=0;i<=(MAFSIZE-1);i++){
	  sum+=accumulator[i]; //Sum of 5 terms
	}
	
	maf=sum/MAFSIZE; //Average of the 5 data points
     310:	ca 01       	movw	r24, r20
     312:	b9 01       	movw	r22, r18
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e4       	ldi	r20, 0x40	; 64
     31a:	51 e4       	ldi	r21, 0x41	; 65
     31c:	0e 94 c0 06 	call	0xd80	; 0xd80 <__divsf3>
     320:	02 c0       	rjmp	.+4      	; 0x326 <accelerometerSmoothed+0x92>
	*accel_accum+=1; //Increment through first 5 points
	if(*accel_accum<MAFSIZE){
		return accelerometerIn();
     322:	0e 94 0d 01 	call	0x21a	; 0x21a <accelerometerIn>
	} //Wait for first 5 points to be accumulated
	else{
		return maf;
	}
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	1f 91       	pop	r17
     32c:	0f 91       	pop	r16
     32e:	ff 90       	pop	r15
     330:	ef 90       	pop	r14
     332:	08 95       	ret

00000334 <main>:
/***************************************************************************************************************
*                                           MAIN PROGRAM LOOP
***************************************************************************************************************/


 int main(){
     334:	0f 93       	push	r16
     336:	1f 93       	push	r17
	hardwareInit();	// initialize hardware
     338:	0e 94 1d 03 	call	0x63a	; 0x63a <hardwareInit>
     33c:	84 ef       	ldi	r24, 0xF4	; 244
     33e:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     340:	20 e9       	ldi	r18, 0x90	; 144
     342:	31 e0       	ldi	r19, 0x01	; 1
     344:	f9 01       	movw	r30, r18
     346:	31 97       	sbiw	r30, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <main+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     34a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34c:	d9 f7       	brne	.-10     	; 0x344 <main+0x10>
	_delay_ms(50);
	sei();					// enable interrupts
     34e:	78 94       	sei
	
	for(;;){// infinite program loop

		#if defined(IRSENSORS)
			irDiff = readIRsmoothed(IR_LEFT, ir_LH_accum, &ir_start_cnt_LH) - readIRsmoothed(IR_RIGHT, ir_RH_accum, &ir_start_cnt_RH); // calculate new accelerometer data
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	6c e2       	ldi	r22, 0x2C	; 44
     356:	72 e0       	ldi	r23, 0x02	; 2
     358:	40 e1       	ldi	r20, 0x10	; 16
     35a:	52 e0       	ldi	r21, 0x02	; 2
     35c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <readIRsmoothed>
     360:	8c 01       	movw	r16, r24
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	64 e4       	ldi	r22, 0x44	; 68
     368:	72 e0       	ldi	r23, 0x02	; 2
     36a:	42 e1       	ldi	r20, 0x12	; 18
     36c:	52 e0       	ldi	r21, 0x02	; 2
     36e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <readIRsmoothed>
     372:	08 1b       	sub	r16, r24
     374:	19 0b       	sbc	r17, r25
     376:	10 93 5f 02 	sts	0x025F, r17
     37a:	00 93 5e 02 	sts	0x025E, r16
			controlsys(irDiff, &MotorDutyCycle, &integrator, &lasterror);	// process control system
     37e:	c8 01       	movw	r24, r16
     380:	6c e5       	ldi	r22, 0x5C	; 92
     382:	72 e0       	ldi	r23, 0x02	; 2
     384:	44 e1       	ldi	r20, 0x14	; 20
     386:	52 e0       	ldi	r21, 0x02	; 2
     388:	28 e1       	ldi	r18, 0x18	; 24
     38a:	32 e0       	ldi	r19, 0x02	; 2
     38c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <controlsys>
		#elif defined(ACCELEROMETER)
			accelY = accelerometerSmoothed(accumulator, &accel_accum); 		// calculate new accelerometer data
			controlsys(accelY, &MotorDutyCycle, &integrator, &lasterror);	// process control system
		#endif
		OCR0A = MotorDutyCycle;
     390:	80 91 5c 02 	lds	r24, 0x025C
     394:	87 bd       	out	0x27, r24	; 39
		//_delay_ms(1);
		/* Toggle the test pin */
		if ((PORTD & _BV(PD7)) == _BV(PD7))
     396:	5f 9b       	sbis	0x0b, 7	; 11
     398:	02 c0       	rjmp	.+4      	; 0x39e <main+0x6a>
			PORTD &= ~_BV(PD7);
     39a:	5f 98       	cbi	0x0b, 7	; 11
     39c:	d9 cf       	rjmp	.-78     	; 0x350 <main+0x1c>
		else
			PORTD |= _BV(PD7);
     39e:	5f 9a       	sbi	0x0b, 7	; 11
     3a0:	d7 cf       	rjmp	.-82     	; 0x350 <main+0x1c>

000003a2 <controlsys>:
float Kp;
float Ki;
float Kd;

#if defined(IRSENSORS)
void controlsys( int IRdiff, int *MotorDutyCycle, float *integrator, float *lasterror ){
     3a2:	6f 92       	push	r6
     3a4:	7f 92       	push	r7
     3a6:	8f 92       	push	r8
     3a8:	9f 92       	push	r9
     3aa:	af 92       	push	r10
     3ac:	bf 92       	push	r11
     3ae:	cf 92       	push	r12
     3b0:	df 92       	push	r13
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	8c 01       	movw	r16, r24
     3c0:	eb 01       	movw	r28, r22
     3c2:	4a 01       	movw	r8, r20
     3c4:	39 01       	movw	r6, r18
		and not the speed of the flywheel, I believe that the Kp value needs to be pretty large.
		This will allow the wheel to speed up quickly.
	*/

	// read the value from kp potentiometer:
	ADMUX = _BV(REFS0) | 2;		// select channel ADC2
     3c6:	82 e4       	ldi	r24, 0x42	; 66
     3c8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= _BV(ADSC);		// start the conversion
     3cc:	80 91 7a 00 	lds	r24, 0x007A
     3d0:	80 64       	ori	r24, 0x40	; 64
     3d2:	80 93 7a 00 	sts	0x007A, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);	// wait for conversion to complete
     3d6:	80 91 7a 00 	lds	r24, 0x007A
     3da:	86 fd       	sbrc	r24, 6
     3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <controlsys+0x34>
#if defined(IRSENSORS)
	Kp = (float)ADC / 1023 * 5;
     3de:	60 91 78 00 	lds	r22, 0x0078
     3e2:	70 91 79 00 	lds	r23, 0x0079
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 ae 08 	call	0x115c	; 0x115c <__floatunsisf>
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 ec       	ldi	r19, 0xC0	; 192
     3f2:	4f e7       	ldi	r20, 0x7F	; 127
     3f4:	54 e4       	ldi	r21, 0x44	; 68
     3f6:	0e 94 c0 06 	call	0xd80	; 0xd80 <__divsf3>
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	40 ea       	ldi	r20, 0xA0	; 160
     400:	50 e4       	ldi	r21, 0x40	; 64
     402:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__mulsf3>
     406:	60 93 68 02 	sts	0x0268, r22
     40a:	70 93 69 02 	sts	0x0269, r23
     40e:	80 93 6a 02 	sts	0x026A, r24
     412:	90 93 6b 02 	sts	0x026B, r25
#elif defined(ACCELEROMETER)
	Kp = (float)ADC / 1023 * 11500;
#endif

	// read the value from ki potentiometer:
	ADMUX = _BV(REFS0) | 3;		// select channel ADC3
     416:	83 e4       	ldi	r24, 0x43	; 67
     418:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= _BV(ADSC);		// start the conversion
     41c:	80 91 7a 00 	lds	r24, 0x007A
     420:	80 64       	ori	r24, 0x40	; 64
     422:	80 93 7a 00 	sts	0x007A, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);	// wait for conversion to complete
     426:	80 91 7a 00 	lds	r24, 0x007A
     42a:	86 fd       	sbrc	r24, 6
     42c:	fc cf       	rjmp	.-8      	; 0x426 <controlsys+0x84>
#if defined(IRSENSORS)
	Ki = (float)ADC / 1023 * 2;
     42e:	60 91 78 00 	lds	r22, 0x0078
     432:	70 91 79 00 	lds	r23, 0x0079
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 ae 08 	call	0x115c	; 0x115c <__floatunsisf>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 ec       	ldi	r19, 0xC0	; 192
     442:	4f e7       	ldi	r20, 0x7F	; 127
     444:	54 e4       	ldi	r21, 0x44	; 68
     446:	0e 94 c0 06 	call	0xd80	; 0xd80 <__divsf3>
     44a:	9b 01       	movw	r18, r22
     44c:	ac 01       	movw	r20, r24
     44e:	0e 94 99 05 	call	0xb32	; 0xb32 <__addsf3>
     452:	60 93 60 02 	sts	0x0260, r22
     456:	70 93 61 02 	sts	0x0261, r23
     45a:	80 93 62 02 	sts	0x0262, r24
     45e:	90 93 63 02 	sts	0x0263, r25
#elif defined(ACCELEROMETER)
	Ki = (float)ADC / 1023 * 150;
#endif
	
	// read the value from kd potentiometer:
	ADMUX = _BV(REFS0) | 4;		// select channel ADC4
     462:	84 e4       	ldi	r24, 0x44	; 68
     464:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= _BV(ADSC);		// start the conversion
     468:	80 91 7a 00 	lds	r24, 0x007A
     46c:	80 64       	ori	r24, 0x40	; 64
     46e:	80 93 7a 00 	sts	0x007A, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);	// wait for conversion to complete
     472:	80 91 7a 00 	lds	r24, 0x007A
     476:	86 fd       	sbrc	r24, 6
     478:	fc cf       	rjmp	.-8      	; 0x472 <controlsys+0xd0>
#if defined(IRSENSORS)
	Kd = (float)ADC / 1023 * 2;
     47a:	60 91 78 00 	lds	r22, 0x0078
     47e:	70 91 79 00 	lds	r23, 0x0079
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 ae 08 	call	0x115c	; 0x115c <__floatunsisf>
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 ec       	ldi	r19, 0xC0	; 192
     48e:	4f e7       	ldi	r20, 0x7F	; 127
     490:	54 e4       	ldi	r21, 0x44	; 68
     492:	0e 94 c0 06 	call	0xd80	; 0xd80 <__divsf3>
     496:	9b 01       	movw	r18, r22
     498:	ac 01       	movw	r20, r24
     49a:	0e 94 99 05 	call	0xb32	; 0xb32 <__addsf3>
     49e:	60 93 64 02 	sts	0x0264, r22
     4a2:	70 93 65 02 	sts	0x0265, r23
     4a6:	80 93 66 02 	sts	0x0266, r24
     4aa:	90 93 67 02 	sts	0x0267, r25
	
	int dt = 364;	//dt = sampling frequency
	float derivative;		// no need to initialize because its value is set before it is used
	float error;			// no need to initialize because its value is set before it is used

	PORTD |= _BV(PD5);
     4ae:	5d 9a       	sbi	0x0b, 5	; 11
	if ((PIND & _BV(PD5)) == _BV(PD5)){
     4b0:	4d 9b       	sbis	0x09, 5	; 9
     4b2:	0f c0       	rjmp	.+30     	; 0x4d2 <controlsys+0x130>
		#if defined(IRSENSORS)
			offset = IRdiff;
     4b4:	b8 01       	movw	r22, r16
     4b6:	88 27       	eor	r24, r24
     4b8:	77 fd       	sbrc	r23, 7
     4ba:	80 95       	com	r24
     4bc:	98 2f       	mov	r25, r24
     4be:	0e 94 fc 07 	call	0xff8	; 0xff8 <__floatsisf>
     4c2:	60 93 00 01 	sts	0x0100, r22
     4c6:	70 93 01 01 	sts	0x0101, r23
     4ca:	80 93 02 01 	sts	0x0102, r24
     4ce:	90 93 03 01 	sts	0x0103, r25
			offset = accelY;
		#endif
	}

	#if defined(IRSENSORS)
		error = offset - IRdiff;	// 0 is the balanced bicycle, so feedback is 0 minus the difference of the IR sensors
     4d2:	b8 01       	movw	r22, r16
     4d4:	88 27       	eor	r24, r24
     4d6:	77 fd       	sbrc	r23, 7
     4d8:	80 95       	com	r24
     4da:	98 2f       	mov	r25, r24
     4dc:	0e 94 fc 07 	call	0xff8	; 0xff8 <__floatsisf>
     4e0:	9b 01       	movw	r18, r22
     4e2:	ac 01       	movw	r20, r24
     4e4:	60 91 00 01 	lds	r22, 0x0100
     4e8:	70 91 01 01 	lds	r23, 0x0101
     4ec:	80 91 02 01 	lds	r24, 0x0102
     4f0:	90 91 03 01 	lds	r25, 0x0103
     4f4:	0e 94 68 05 	call	0xad0	; 0xad0 <__subsf3>
     4f8:	7b 01       	movw	r14, r22
     4fa:	8c 01       	movw	r16, r24
		to make it perfect, which is a continual battle and will throw off our control. This value might
		need to be reduced to make sure that the angle is a small enough angle, but it should be large
		enough that the control system isn't consistently working.
	*/

	if (fabs(error) <= 4){
     4fc:	9f 77       	andi	r25, 0x7F	; 127
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	40 e8       	ldi	r20, 0x80	; 128
     504:	50 e4       	ldi	r21, 0x40	; 64
     506:	0e 94 cc 07 	call	0xf98	; 0xf98 <__lesf2>
     50a:	18 16       	cp	r1, r24
     50c:	1c f0       	brlt	.+6      	; 0x514 <__stack+0x15>
		*MotorDutyCycle  = 0; }
     50e:	19 82       	std	Y+1, r1	; 0x01
     510:	18 82       	st	Y, r1
     512:	67 c0       	rjmp	.+206    	; 0x5e2 <__stack+0xe3>
	else{
		*integrator = *integrator + (error/dt);	//integrator term sums all previous errors
     514:	c8 01       	movw	r24, r16
     516:	b7 01       	movw	r22, r14
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	46 eb       	ldi	r20, 0xB6	; 182
     51e:	53 e4       	ldi	r21, 0x43	; 67
     520:	0e 94 c0 06 	call	0xd80	; 0xd80 <__divsf3>
     524:	9b 01       	movw	r18, r22
     526:	ac 01       	movw	r20, r24
     528:	f4 01       	movw	r30, r8
     52a:	60 81       	ld	r22, Z
     52c:	71 81       	ldd	r23, Z+1	; 0x01
     52e:	82 81       	ldd	r24, Z+2	; 0x02
     530:	93 81       	ldd	r25, Z+3	; 0x03
     532:	0e 94 99 05 	call	0xb32	; 0xb32 <__addsf3>
     536:	f4 01       	movw	r30, r8
     538:	60 83       	st	Z, r22
     53a:	71 83       	std	Z+1, r23	; 0x01
     53c:	82 83       	std	Z+2, r24	; 0x02
     53e:	93 83       	std	Z+3, r25	; 0x03
/*		if (fabs(*integrator) > .5){	//limit integrator term. This will keep the integrator
			if (*integrator < 0 )		//from interfering with direction while still letting the 
				*integrator = -.5;		//integrator change the speed at which the control system corrects
			else
				*integrator = .5;}
*/			derivative = (error - (*lasterror))*dt;		//derivative term subtracts lasterror by current error
     540:	c8 01       	movw	r24, r16
     542:	b7 01       	movw	r22, r14
     544:	f3 01       	movw	r30, r6
     546:	20 81       	ld	r18, Z
     548:	31 81       	ldd	r19, Z+1	; 0x01
     54a:	42 81       	ldd	r20, Z+2	; 0x02
     54c:	53 81       	ldd	r21, Z+3	; 0x03
     54e:	0e 94 68 05 	call	0xad0	; 0xad0 <__subsf3>
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	46 eb       	ldi	r20, 0xB6	; 182
     558:	53 e4       	ldi	r21, 0x43	; 67
     55a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__mulsf3>
     55e:	5b 01       	movw	r10, r22
     560:	6c 01       	movw	r12, r24
		*lasterror = error;
     562:	f3 01       	movw	r30, r6
     564:	e0 82       	st	Z, r14
     566:	f1 82       	std	Z+1, r15	; 0x01
     568:	02 83       	std	Z+2, r16	; 0x02
     56a:	13 83       	std	Z+3, r17	; 0x03
		*MotorDutyCycle =  Kp*error + Ki*(*integrator) + Kd*derivative;
     56c:	c8 01       	movw	r24, r16
     56e:	b7 01       	movw	r22, r14
     570:	20 91 68 02 	lds	r18, 0x0268
     574:	30 91 69 02 	lds	r19, 0x0269
     578:	40 91 6a 02 	lds	r20, 0x026A
     57c:	50 91 6b 02 	lds	r21, 0x026B
     580:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__mulsf3>
     584:	7b 01       	movw	r14, r22
     586:	8c 01       	movw	r16, r24
     588:	60 91 60 02 	lds	r22, 0x0260
     58c:	70 91 61 02 	lds	r23, 0x0261
     590:	80 91 62 02 	lds	r24, 0x0262
     594:	90 91 63 02 	lds	r25, 0x0263
     598:	f4 01       	movw	r30, r8
     59a:	20 81       	ld	r18, Z
     59c:	31 81       	ldd	r19, Z+1	; 0x01
     59e:	42 81       	ldd	r20, Z+2	; 0x02
     5a0:	53 81       	ldd	r21, Z+3	; 0x03
     5a2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__mulsf3>
     5a6:	9b 01       	movw	r18, r22
     5a8:	ac 01       	movw	r20, r24
     5aa:	c8 01       	movw	r24, r16
     5ac:	b7 01       	movw	r22, r14
     5ae:	0e 94 99 05 	call	0xb32	; 0xb32 <__addsf3>
     5b2:	7b 01       	movw	r14, r22
     5b4:	8c 01       	movw	r16, r24
     5b6:	c6 01       	movw	r24, r12
     5b8:	b5 01       	movw	r22, r10
     5ba:	20 91 64 02 	lds	r18, 0x0264
     5be:	30 91 65 02 	lds	r19, 0x0265
     5c2:	40 91 66 02 	lds	r20, 0x0266
     5c6:	50 91 67 02 	lds	r21, 0x0267
     5ca:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__mulsf3>
     5ce:	9b 01       	movw	r18, r22
     5d0:	ac 01       	movw	r20, r24
     5d2:	c8 01       	movw	r24, r16
     5d4:	b7 01       	movw	r22, r14
     5d6:	0e 94 99 05 	call	0xb32	; 0xb32 <__addsf3>
     5da:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__fixsfsi>
     5de:	79 83       	std	Y+1, r23	; 0x01
     5e0:	68 83       	st	Y, r22

	/*This portion of the code checks to see if the duty cycle is negative. We will output a positive
	  duty cycle with a sign variable, thus we will take the absolute value of the negavtive duty cycle
	  and set our direction flag.
	*/
	if (*MotorDutyCycle>0x80)		//limits duty cycle to 128 as maximum
     5e2:	88 81       	ld	r24, Y
     5e4:	99 81       	ldd	r25, Y+1	; 0x01
     5e6:	81 38       	cpi	r24, 0x81	; 129
     5e8:	91 05       	cpc	r25, r1
     5ea:	1c f0       	brlt	.+6      	; 0x5f2 <__stack+0xf3>
	*MotorDutyCycle = 0x80;
     5ec:	80 e8       	ldi	r24, 0x80	; 128
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	05 c0       	rjmp	.+10     	; 0x5fc <__stack+0xfd>
	else if (*MotorDutyCycle<-128)	//limits duty cycle to -128 as minimum
     5f2:	80 58       	subi	r24, 0x80	; 128
     5f4:	9f 4f       	sbci	r25, 0xFF	; 255
     5f6:	24 f4       	brge	.+8      	; 0x600 <__stack+0x101>
	*MotorDutyCycle = -128;
     5f8:	80 e8       	ldi	r24, 0x80	; 128
     5fa:	9f ef       	ldi	r25, 0xFF	; 255
     5fc:	99 83       	std	Y+1, r25	; 0x01
     5fe:	88 83       	st	Y, r24
 
	*MotorDutyCycle = *MotorDutyCycle + 128 + 33;
     600:	88 81       	ld	r24, Y
     602:	99 81       	ldd	r25, Y+1	; 0x01
     604:	8f 55       	subi	r24, 0x5F	; 95
     606:	9f 4f       	sbci	r25, 0xFF	; 255
     608:	99 83       	std	Y+1, r25	; 0x01
     60a:	88 83       	st	Y, r24

	if (*MotorDutyCycle>0xFF)		//limits duty cycle to 255 as maximum
     60c:	8f 3f       	cpi	r24, 0xFF	; 255
     60e:	91 05       	cpc	r25, r1
     610:	29 f0       	breq	.+10     	; 0x61c <__stack+0x11d>
     612:	24 f0       	brlt	.+8      	; 0x61c <__stack+0x11d>
	*MotorDutyCycle = 0xFF;
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	99 83       	std	Y+1, r25	; 0x01
     61a:	88 83       	st	Y, r24

} 
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	df 90       	pop	r13
     62a:	cf 90       	pop	r12
     62c:	bf 90       	pop	r11
     62e:	af 90       	pop	r10
     630:	9f 90       	pop	r9
     632:	8f 90       	pop	r8
     634:	7f 90       	pop	r7
     636:	6f 90       	pop	r6
     638:	08 95       	ret

0000063a <hardwareInit>:
#include "hardwareInit.h"

void hardwareInit(void){

		/* Set up timer1 for accelerometer */
		TCCR1B |= _BV(CS10); 	// prescale F_CLK_IO by 8
     63a:	41 e8       	ldi	r20, 0x81	; 129
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	fa 01       	movw	r30, r20
     640:	80 81       	ld	r24, Z
     642:	81 60       	ori	r24, 0x01	; 1
     644:	80 83       	st	Z, r24
		TIMSK1 |= _BV(TOIE1);	// enable timer overflow interrupts
     646:	2f e6       	ldi	r18, 0x6F	; 111
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	f9 01       	movw	r30, r18
     64c:	80 81       	ld	r24, Z
     64e:	81 60       	ori	r24, 0x01	; 1
     650:	80 83       	st	Z, r24
		TIFR1 |= 1 << TOV1;		// clear pending overflow interrupts
     652:	b0 9a       	sbi	0x16, 0	; 22
		/* Set up timer0 for motor control */
		TCCR0A |= _BV(COM0A1);  // inverted pwm outputs
     654:	84 b5       	in	r24, 0x24	; 36
     656:	80 68       	ori	r24, 0x80	; 128
     658:	84 bd       	out	0x24, r24	; 36
		TCCR0A |= _BV(WGM01) | _BV(WGM00);	// Phase correct mode - ICR0 is top
     65a:	84 b5       	in	r24, 0x24	; 36
     65c:	83 60       	ori	r24, 0x03	; 3
     65e:	84 bd       	out	0x24, r24	; 36
		TCCR0B |= _BV(CS01); 	// prescale F_CLK_IO by 8
     660:	85 b5       	in	r24, 0x25	; 37
     662:	82 60       	ori	r24, 0x02	; 2
     664:	85 bd       	out	0x25, r24	; 37

		ADCSRA |= _BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);	// ADC prescale factor is 128 [Fcpu/128]
     666:	ea e7       	ldi	r30, 0x7A	; 122
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	80 81       	ld	r24, Z
     66c:	87 60       	ori	r24, 0x07	; 7
     66e:	80 83       	st	Z, r24
		DIDR1 |= _BV(AIN1D) | _BV(AIN0D);			// disable digital input buffers on ADC pins
     670:	af e7       	ldi	r26, 0x7F	; 127
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	8c 91       	ld	r24, X
     676:	83 60       	ori	r24, 0x03	; 3
     678:	8c 93       	st	X, r24
		ADCSRA |= _BV(ADEN);						// enable ADC conversions
     67a:	80 81       	ld	r24, Z
     67c:	80 68       	ori	r24, 0x80	; 128
     67e:	80 83       	st	Z, r24
		ADMUX  |= _BV(REFS0); 						// AVCC with external capacitor at AREF pin
     680:	ec e7       	ldi	r30, 0x7C	; 124
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	80 64       	ori	r24, 0x40	; 64
     688:	80 83       	st	Z, r24

#if defined(__AVR_ATmega168__) || defined(__AVR_ATmega328__)

		/* Set up pin 6 for motor controller PWM output. */
		DDRD |= _BV(PD6); 			//Set PD6 for output
     68a:	56 9a       	sbi	0x0a, 6	; 10
		PORTD |= _BV(PD6);			//Set  PD6 to Output High
     68c:	5e 9a       	sbi	0x0b, 6	; 11
		
		/* This sets the input pins for Pin 8. Pin 8 is our Accelerometer PWM input. */
		DDRB &= ~_BV(PB0);
     68e:	20 98       	cbi	0x04, 0	; 4
		PORTB &= ~_BV(PB0);
     690:	28 98       	cbi	0x05, 0	; 5

		/* Set up pin 10 for motor controller direction output. */
		DDRB |= _BV(PB2);			//Set PB2 to output
     692:	22 9a       	sbi	0x04, 2	; 4
		PORTB |= _BV(PB2);			//Set PB2 to Output high
     694:	2a 9a       	sbi	0x05, 2	; 5

		/* Enable Timer1 interrupts. Rising edge triggered initially */
		TIMSK1 |= _BV(ICIE1);
     696:	f9 01       	movw	r30, r18
     698:	80 81       	ld	r24, Z
     69a:	80 62       	ori	r24, 0x20	; 32
     69c:	80 83       	st	Z, r24
		TCCR1B |= _BV(ICES1);
     69e:	fa 01       	movw	r30, r20
     6a0:	80 81       	ld	r24, Z
     6a2:	80 64       	ori	r24, 0x40	; 64
     6a4:	80 83       	st	Z, r24

		/* Set up pin 7 for accelerometer interrupt test pin. */
		DDRD |= _BV(PD7);			//Set PD7 to output
     6a6:	57 9a       	sbi	0x0a, 7	; 10
		PORTD |= _BV(PD7);			//Set PD7 to Output high
     6a8:	5f 9a       	sbi	0x0b, 7	; 11
	_delay_ms(300);
	PORTB &= ~_BV(PB2);
	_delay_ms(300);
	}
*/
}
     6aa:	08 95       	ret

000006ac <seccontrolsys>:
//#include <avr/eeprom.h>

float secoffset=0;
int dutycyclevalue=60;

void seccontrolsys( float accelY, int *MotorDutyCycle, int *MotorDirection){
     6ac:	cf 92       	push	r12
     6ae:	df 92       	push	r13
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	7b 01       	movw	r14, r22
     6be:	8c 01       	movw	r16, r24
     6c0:	ea 01       	movw	r28, r20
     6c2:	69 01       	movw	r12, r18
		This will allow the wheel to speed up quickly.
	*/

	float error;

	PORTD |= _BV(PD5);
     6c4:	5d 9a       	sbi	0x0b, 5	; 11
	if ((PIND & _BV(PD5)) == _BV(PD5)){
     6c6:	4d 9b       	sbis	0x09, 5	; 9
     6c8:	08 c0       	rjmp	.+16     	; 0x6da <seccontrolsys+0x2e>
		secoffset = accelY;
     6ca:	60 93 1c 02 	sts	0x021C, r22
     6ce:	70 93 1d 02 	sts	0x021D, r23
     6d2:	80 93 1e 02 	sts	0x021E, r24
     6d6:	90 93 1f 02 	sts	0x021F, r25
	}

	error = secoffset - accelY;	// 0 is the balanced bicycle, so feedback is 0 minus the value from accel
     6da:	60 91 1c 02 	lds	r22, 0x021C
     6de:	70 91 1d 02 	lds	r23, 0x021D
     6e2:	80 91 1e 02 	lds	r24, 0x021E
     6e6:	90 91 1f 02 	lds	r25, 0x021F
     6ea:	a8 01       	movw	r20, r16
     6ec:	97 01       	movw	r18, r14
     6ee:	0e 94 68 05 	call	0xad0	; 0xad0 <__subsf3>
     6f2:	7b 01       	movw	r14, r22
     6f4:	8c 01       	movw	r16, r24
		to make it perfect, which is a continual battle and will throw off our control. This value might
		need to be reduced to make sure that the angle is a small enough angle, but it should be large
		enough that the control system isn't consistently working.
	*/

	if (error < 0){
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	0e 94 9c 07 	call	0xf38	; 0xf38 <__ltsf2>
     702:	88 23       	and	r24, r24
     704:	64 f4       	brge	.+24     	; 0x71e <seccontrolsys+0x72>
		*MotorDutyCycle = dutycyclevalue;
     706:	80 91 04 01 	lds	r24, 0x0104
     70a:	90 91 05 01 	lds	r25, 0x0105
     70e:	99 83       	std	Y+1, r25	; 0x01
     710:	88 83       	st	Y, r24
		*MotorDirection = 1;}
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	f6 01       	movw	r30, r12
     718:	91 83       	std	Z+1, r25	; 0x01
     71a:	80 83       	st	Z, r24
     71c:	16 c0       	rjmp	.+44     	; 0x74a <seccontrolsys+0x9e>
	else if (error > 0){
     71e:	c8 01       	movw	r24, r16
     720:	b7 01       	movw	r22, r14
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	0e 94 6c 07 	call	0xed8	; 0xed8 <__gtsf2>
     72e:	18 16       	cp	r1, r24
     730:	54 f4       	brge	.+20     	; 0x746 <seccontrolsys+0x9a>
		*MotorDutyCycle = dutycyclevalue;
     732:	80 91 04 01 	lds	r24, 0x0104
     736:	90 91 05 01 	lds	r25, 0x0105
     73a:	99 83       	std	Y+1, r25	; 0x01
     73c:	88 83       	st	Y, r24
		*MotorDirection = 0;}
     73e:	f6 01       	movw	r30, r12
     740:	11 82       	std	Z+1, r1	; 0x01
     742:	10 82       	st	Z, r1
     744:	02 c0       	rjmp	.+4      	; 0x74a <seccontrolsys+0x9e>
	else *MotorDutyCycle = 0;
     746:	19 82       	std	Y+1, r1	; 0x01
     748:	18 82       	st	Y, r1
} 
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	08 95       	ret

0000075c <readIR>:
#include "irsensors.h"

int sensorValue;

int readIR(int sensor) {
	if (sensor == IR_LEFT){
     75c:	00 97       	sbiw	r24, 0x00	; 0
     75e:	69 f4       	brne	.+26     	; 0x77a <readIR+0x1e>
		// read the value from the left IR sensor:
		ADMUX = _BV(REFS0) | 0;		// select channel ADC0
     760:	80 e4       	ldi	r24, 0x40	; 64
     762:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA |= _BV(ADSC);		// start the conversion
     766:	80 91 7a 00 	lds	r24, 0x007A
     76a:	80 64       	ori	r24, 0x40	; 64
     76c:	80 93 7a 00 	sts	0x007A, r24
		loop_until_bit_is_clear(ADCSRA, ADSC);	// wait for conversion to complete
     770:	80 91 7a 00 	lds	r24, 0x007A
     774:	86 fd       	sbrc	r24, 6
     776:	fc cf       	rjmp	.-8      	; 0x770 <readIR+0x14>
     778:	0e c0       	rjmp	.+28     	; 0x796 <readIR+0x3a>
		sensorValue = ADC;
	}else if (sensor == IR_RIGHT){
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	a1 f4       	brne	.+40     	; 0x7a6 <readIR+0x4a>
		// read the value from the right IR sensor:
		ADMUX = _BV(REFS0) | 1;		// select channel ADC1
     77e:	81 e4       	ldi	r24, 0x41	; 65
     780:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA |= _BV(ADSC);		// start the conversion
     784:	80 91 7a 00 	lds	r24, 0x007A
     788:	80 64       	ori	r24, 0x40	; 64
     78a:	80 93 7a 00 	sts	0x007A, r24
		loop_until_bit_is_clear(ADCSRA, ADSC);	// wait for conversion to complete
     78e:	80 91 7a 00 	lds	r24, 0x007A
     792:	86 fd       	sbrc	r24, 6
     794:	fc cf       	rjmp	.-8      	; 0x78e <readIR+0x32>
		sensorValue = ADC;
     796:	80 91 78 00 	lds	r24, 0x0078
     79a:	90 91 79 00 	lds	r25, 0x0079
     79e:	90 93 6d 02 	sts	0x026D, r25
     7a2:	80 93 6c 02 	sts	0x026C, r24
	}
	return sensorValue;
}
     7a6:	80 91 6c 02 	lds	r24, 0x026C
     7aa:	90 91 6d 02 	lds	r25, 0x026D
     7ae:	08 95       	ret

000007b0 <readIRsmoothed>:

int readIRsmoothed(int sensor, int ir_accum[], int *accum){
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	7c 01       	movw	r14, r24
     7be:	eb 01       	movw	r28, r22
     7c0:	8a 01       	movw	r16, r20
     7c2:	fb 01       	movw	r30, r22
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
	int i=0;
	int maf;	
	int sum=0;
	
	for(i=0;i<=(MAFSIZE-2);i++){
	  ir_accum[i]=ir_accum[i+1]; //Shift out the oldest
     7c8:	82 81       	ldd	r24, Z+2	; 0x02
     7ca:	93 81       	ldd	r25, Z+3	; 0x03
     7cc:	81 93       	st	Z+, r24
     7ce:	91 93       	st	Z+, r25
int readIRsmoothed(int sensor, int ir_accum[], int *accum){
	int i=0;
	int maf;	
	int sum=0;
	
	for(i=0;i<=(MAFSIZE-2);i++){
     7d0:	2f 5f       	subi	r18, 0xFF	; 255
     7d2:	3f 4f       	sbci	r19, 0xFF	; 255
     7d4:	2b 30       	cpi	r18, 0x0B	; 11
     7d6:	31 05       	cpc	r19, r1
     7d8:	b9 f7       	brne	.-18     	; 0x7c8 <readIRsmoothed+0x18>
	  ir_accum[i]=ir_accum[i+1]; //Shift out the oldest
	}
	ir_accum[MAFSIZE-1]=readIR(sensor); //Retrieve most recent noisy data point
     7da:	c7 01       	movw	r24, r14
     7dc:	0e 94 ae 03 	call	0x75c	; 0x75c <readIR>
     7e0:	9f 8b       	std	Y+23, r25	; 0x17
     7e2:	8e 8b       	std	Y+22, r24	; 0x16
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0

	for(i=0;i<=(MAFSIZE-1);i++){
	  sum+=ir_accum[i]; //Sum of 5 terms
     7ec:	fe 01       	movw	r30, r28
     7ee:	e2 0f       	add	r30, r18
     7f0:	f3 1f       	adc	r31, r19
     7f2:	80 81       	ld	r24, Z
     7f4:	91 81       	ldd	r25, Z+1	; 0x01
     7f6:	48 0f       	add	r20, r24
     7f8:	59 1f       	adc	r21, r25
     7fa:	2e 5f       	subi	r18, 0xFE	; 254
     7fc:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i=0;i<=(MAFSIZE-2);i++){
	  ir_accum[i]=ir_accum[i+1]; //Shift out the oldest
	}
	ir_accum[MAFSIZE-1]=readIR(sensor); //Retrieve most recent noisy data point

	for(i=0;i<=(MAFSIZE-1);i++){
     7fe:	28 31       	cpi	r18, 0x18	; 24
     800:	31 05       	cpc	r19, r1
     802:	a1 f7       	brne	.-24     	; 0x7ec <readIRsmoothed+0x3c>
	  sum+=ir_accum[i]; //Sum of 5 terms
	}

	maf=sum/MAFSIZE; //Average of the 5 data points
	*accum+=1; //Increment through first 5 points
     804:	f8 01       	movw	r30, r16
     806:	80 81       	ld	r24, Z
     808:	91 81       	ldd	r25, Z+1	; 0x01
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	91 83       	std	Z+1, r25	; 0x01
     80e:	80 83       	st	Z, r24
	if(*accum<MAFSIZE){
     810:	0c 97       	sbiw	r24, 0x0c	; 12
     812:	34 f0       	brlt	.+12     	; 0x820 <readIRsmoothed+0x70>

	for(i=0;i<=(MAFSIZE-1);i++){
	  sum+=ir_accum[i]; //Sum of 5 terms
	}

	maf=sum/MAFSIZE; //Average of the 5 data points
     814:	ca 01       	movw	r24, r20
     816:	6c e0       	ldi	r22, 0x0C	; 12
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__divmodhi4>
     81e:	04 c0       	rjmp	.+8      	; 0x828 <readIRsmoothed+0x78>
	*accum+=1; //Increment through first 5 points
	if(*accum<MAFSIZE){
		return readIR(sensor);
     820:	c7 01       	movw	r24, r14
     822:	0e 94 ae 03 	call	0x75c	; 0x75c <readIR>
     826:	bc 01       	movw	r22, r24
	} //Wait for first 5 points to be accumulated
	else{
		return maf;
	}
}
     828:	cb 01       	movw	r24, r22
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	08 95       	ret

00000838 <_fpadd_parts>:
     838:	a0 e0       	ldi	r26, 0x00	; 0
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	e2 e2       	ldi	r30, 0x22	; 34
     83e:	f4 e0       	ldi	r31, 0x04	; 4
     840:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__prologue_saves__>
     844:	dc 01       	movw	r26, r24
     846:	2b 01       	movw	r4, r22
     848:	fa 01       	movw	r30, r20
     84a:	9c 91       	ld	r25, X
     84c:	92 30       	cpi	r25, 0x02	; 2
     84e:	08 f4       	brcc	.+2      	; 0x852 <_fpadd_parts+0x1a>
     850:	39 c1       	rjmp	.+626    	; 0xac4 <_fpadd_parts+0x28c>
     852:	eb 01       	movw	r28, r22
     854:	88 81       	ld	r24, Y
     856:	82 30       	cpi	r24, 0x02	; 2
     858:	08 f4       	brcc	.+2      	; 0x85c <_fpadd_parts+0x24>
     85a:	33 c1       	rjmp	.+614    	; 0xac2 <_fpadd_parts+0x28a>
     85c:	94 30       	cpi	r25, 0x04	; 4
     85e:	69 f4       	brne	.+26     	; 0x87a <_fpadd_parts+0x42>
     860:	84 30       	cpi	r24, 0x04	; 4
     862:	09 f0       	breq	.+2      	; 0x866 <_fpadd_parts+0x2e>
     864:	2f c1       	rjmp	.+606    	; 0xac4 <_fpadd_parts+0x28c>
     866:	11 96       	adiw	r26, 0x01	; 1
     868:	9c 91       	ld	r25, X
     86a:	11 97       	sbiw	r26, 0x01	; 1
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	98 17       	cp	r25, r24
     870:	09 f4       	brne	.+2      	; 0x874 <_fpadd_parts+0x3c>
     872:	28 c1       	rjmp	.+592    	; 0xac4 <_fpadd_parts+0x28c>
     874:	a6 e0       	ldi	r26, 0x06	; 6
     876:	b1 e0       	ldi	r27, 0x01	; 1
     878:	25 c1       	rjmp	.+586    	; 0xac4 <_fpadd_parts+0x28c>
     87a:	84 30       	cpi	r24, 0x04	; 4
     87c:	09 f4       	brne	.+2      	; 0x880 <_fpadd_parts+0x48>
     87e:	21 c1       	rjmp	.+578    	; 0xac2 <_fpadd_parts+0x28a>
     880:	82 30       	cpi	r24, 0x02	; 2
     882:	a9 f4       	brne	.+42     	; 0x8ae <_fpadd_parts+0x76>
     884:	92 30       	cpi	r25, 0x02	; 2
     886:	09 f0       	breq	.+2      	; 0x88a <_fpadd_parts+0x52>
     888:	1d c1       	rjmp	.+570    	; 0xac4 <_fpadd_parts+0x28c>
     88a:	9a 01       	movw	r18, r20
     88c:	ad 01       	movw	r20, r26
     88e:	88 e0       	ldi	r24, 0x08	; 8
     890:	ea 01       	movw	r28, r20
     892:	09 90       	ld	r0, Y+
     894:	ae 01       	movw	r20, r28
     896:	e9 01       	movw	r28, r18
     898:	09 92       	st	Y+, r0
     89a:	9e 01       	movw	r18, r28
     89c:	81 50       	subi	r24, 0x01	; 1
     89e:	c1 f7       	brne	.-16     	; 0x890 <_fpadd_parts+0x58>
     8a0:	e2 01       	movw	r28, r4
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
     8a4:	11 96       	adiw	r26, 0x01	; 1
     8a6:	9c 91       	ld	r25, X
     8a8:	89 23       	and	r24, r25
     8aa:	81 83       	std	Z+1, r24	; 0x01
     8ac:	08 c1       	rjmp	.+528    	; 0xabe <_fpadd_parts+0x286>
     8ae:	92 30       	cpi	r25, 0x02	; 2
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <_fpadd_parts+0x7c>
     8b2:	07 c1       	rjmp	.+526    	; 0xac2 <_fpadd_parts+0x28a>
     8b4:	12 96       	adiw	r26, 0x02	; 2
     8b6:	2d 90       	ld	r2, X+
     8b8:	3c 90       	ld	r3, X
     8ba:	13 97       	sbiw	r26, 0x03	; 3
     8bc:	eb 01       	movw	r28, r22
     8be:	8a 81       	ldd	r24, Y+2	; 0x02
     8c0:	9b 81       	ldd	r25, Y+3	; 0x03
     8c2:	14 96       	adiw	r26, 0x04	; 4
     8c4:	ad 90       	ld	r10, X+
     8c6:	bd 90       	ld	r11, X+
     8c8:	cd 90       	ld	r12, X+
     8ca:	dc 90       	ld	r13, X
     8cc:	17 97       	sbiw	r26, 0x07	; 7
     8ce:	ec 80       	ldd	r14, Y+4	; 0x04
     8d0:	fd 80       	ldd	r15, Y+5	; 0x05
     8d2:	0e 81       	ldd	r16, Y+6	; 0x06
     8d4:	1f 81       	ldd	r17, Y+7	; 0x07
     8d6:	91 01       	movw	r18, r2
     8d8:	28 1b       	sub	r18, r24
     8da:	39 0b       	sbc	r19, r25
     8dc:	b9 01       	movw	r22, r18
     8de:	37 ff       	sbrs	r19, 7
     8e0:	04 c0       	rjmp	.+8      	; 0x8ea <_fpadd_parts+0xb2>
     8e2:	66 27       	eor	r22, r22
     8e4:	77 27       	eor	r23, r23
     8e6:	62 1b       	sub	r22, r18
     8e8:	73 0b       	sbc	r23, r19
     8ea:	60 32       	cpi	r22, 0x20	; 32
     8ec:	71 05       	cpc	r23, r1
     8ee:	0c f0       	brlt	.+2      	; 0x8f2 <_fpadd_parts+0xba>
     8f0:	61 c0       	rjmp	.+194    	; 0x9b4 <_fpadd_parts+0x17c>
     8f2:	12 16       	cp	r1, r18
     8f4:	13 06       	cpc	r1, r19
     8f6:	6c f5       	brge	.+90     	; 0x952 <_fpadd_parts+0x11a>
     8f8:	37 01       	movw	r6, r14
     8fa:	48 01       	movw	r8, r16
     8fc:	06 2e       	mov	r0, r22
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <_fpadd_parts+0xd0>
     900:	96 94       	lsr	r9
     902:	87 94       	ror	r8
     904:	77 94       	ror	r7
     906:	67 94       	ror	r6
     908:	0a 94       	dec	r0
     90a:	d2 f7       	brpl	.-12     	; 0x900 <_fpadd_parts+0xc8>
     90c:	21 e0       	ldi	r18, 0x01	; 1
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	04 c0       	rjmp	.+8      	; 0x91e <_fpadd_parts+0xe6>
     916:	22 0f       	add	r18, r18
     918:	33 1f       	adc	r19, r19
     91a:	44 1f       	adc	r20, r20
     91c:	55 1f       	adc	r21, r21
     91e:	6a 95       	dec	r22
     920:	d2 f7       	brpl	.-12     	; 0x916 <_fpadd_parts+0xde>
     922:	21 50       	subi	r18, 0x01	; 1
     924:	30 40       	sbci	r19, 0x00	; 0
     926:	40 40       	sbci	r20, 0x00	; 0
     928:	50 40       	sbci	r21, 0x00	; 0
     92a:	2e 21       	and	r18, r14
     92c:	3f 21       	and	r19, r15
     92e:	40 23       	and	r20, r16
     930:	51 23       	and	r21, r17
     932:	21 15       	cp	r18, r1
     934:	31 05       	cpc	r19, r1
     936:	41 05       	cpc	r20, r1
     938:	51 05       	cpc	r21, r1
     93a:	21 f0       	breq	.+8      	; 0x944 <_fpadd_parts+0x10c>
     93c:	21 e0       	ldi	r18, 0x01	; 1
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e0       	ldi	r20, 0x00	; 0
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	79 01       	movw	r14, r18
     946:	8a 01       	movw	r16, r20
     948:	e6 28       	or	r14, r6
     94a:	f7 28       	or	r15, r7
     94c:	08 29       	or	r16, r8
     94e:	19 29       	or	r17, r9
     950:	3c c0       	rjmp	.+120    	; 0x9ca <_fpadd_parts+0x192>
     952:	23 2b       	or	r18, r19
     954:	d1 f1       	breq	.+116    	; 0x9ca <_fpadd_parts+0x192>
     956:	26 0e       	add	r2, r22
     958:	37 1e       	adc	r3, r23
     95a:	35 01       	movw	r6, r10
     95c:	46 01       	movw	r8, r12
     95e:	06 2e       	mov	r0, r22
     960:	04 c0       	rjmp	.+8      	; 0x96a <_fpadd_parts+0x132>
     962:	96 94       	lsr	r9
     964:	87 94       	ror	r8
     966:	77 94       	ror	r7
     968:	67 94       	ror	r6
     96a:	0a 94       	dec	r0
     96c:	d2 f7       	brpl	.-12     	; 0x962 <_fpadd_parts+0x12a>
     96e:	21 e0       	ldi	r18, 0x01	; 1
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	04 c0       	rjmp	.+8      	; 0x980 <_fpadd_parts+0x148>
     978:	22 0f       	add	r18, r18
     97a:	33 1f       	adc	r19, r19
     97c:	44 1f       	adc	r20, r20
     97e:	55 1f       	adc	r21, r21
     980:	6a 95       	dec	r22
     982:	d2 f7       	brpl	.-12     	; 0x978 <_fpadd_parts+0x140>
     984:	21 50       	subi	r18, 0x01	; 1
     986:	30 40       	sbci	r19, 0x00	; 0
     988:	40 40       	sbci	r20, 0x00	; 0
     98a:	50 40       	sbci	r21, 0x00	; 0
     98c:	2a 21       	and	r18, r10
     98e:	3b 21       	and	r19, r11
     990:	4c 21       	and	r20, r12
     992:	5d 21       	and	r21, r13
     994:	21 15       	cp	r18, r1
     996:	31 05       	cpc	r19, r1
     998:	41 05       	cpc	r20, r1
     99a:	51 05       	cpc	r21, r1
     99c:	21 f0       	breq	.+8      	; 0x9a6 <_fpadd_parts+0x16e>
     99e:	21 e0       	ldi	r18, 0x01	; 1
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	59 01       	movw	r10, r18
     9a8:	6a 01       	movw	r12, r20
     9aa:	a6 28       	or	r10, r6
     9ac:	b7 28       	or	r11, r7
     9ae:	c8 28       	or	r12, r8
     9b0:	d9 28       	or	r13, r9
     9b2:	0b c0       	rjmp	.+22     	; 0x9ca <_fpadd_parts+0x192>
     9b4:	82 15       	cp	r24, r2
     9b6:	93 05       	cpc	r25, r3
     9b8:	2c f0       	brlt	.+10     	; 0x9c4 <_fpadd_parts+0x18c>
     9ba:	1c 01       	movw	r2, r24
     9bc:	aa 24       	eor	r10, r10
     9be:	bb 24       	eor	r11, r11
     9c0:	65 01       	movw	r12, r10
     9c2:	03 c0       	rjmp	.+6      	; 0x9ca <_fpadd_parts+0x192>
     9c4:	ee 24       	eor	r14, r14
     9c6:	ff 24       	eor	r15, r15
     9c8:	87 01       	movw	r16, r14
     9ca:	11 96       	adiw	r26, 0x01	; 1
     9cc:	9c 91       	ld	r25, X
     9ce:	d2 01       	movw	r26, r4
     9d0:	11 96       	adiw	r26, 0x01	; 1
     9d2:	8c 91       	ld	r24, X
     9d4:	98 17       	cp	r25, r24
     9d6:	09 f4       	brne	.+2      	; 0x9da <_fpadd_parts+0x1a2>
     9d8:	45 c0       	rjmp	.+138    	; 0xa64 <_fpadd_parts+0x22c>
     9da:	99 23       	and	r25, r25
     9dc:	39 f0       	breq	.+14     	; 0x9ec <_fpadd_parts+0x1b4>
     9de:	a8 01       	movw	r20, r16
     9e0:	97 01       	movw	r18, r14
     9e2:	2a 19       	sub	r18, r10
     9e4:	3b 09       	sbc	r19, r11
     9e6:	4c 09       	sbc	r20, r12
     9e8:	5d 09       	sbc	r21, r13
     9ea:	06 c0       	rjmp	.+12     	; 0x9f8 <_fpadd_parts+0x1c0>
     9ec:	a6 01       	movw	r20, r12
     9ee:	95 01       	movw	r18, r10
     9f0:	2e 19       	sub	r18, r14
     9f2:	3f 09       	sbc	r19, r15
     9f4:	40 0b       	sbc	r20, r16
     9f6:	51 0b       	sbc	r21, r17
     9f8:	57 fd       	sbrc	r21, 7
     9fa:	08 c0       	rjmp	.+16     	; 0xa0c <_fpadd_parts+0x1d4>
     9fc:	11 82       	std	Z+1, r1	; 0x01
     9fe:	33 82       	std	Z+3, r3	; 0x03
     a00:	22 82       	std	Z+2, r2	; 0x02
     a02:	24 83       	std	Z+4, r18	; 0x04
     a04:	35 83       	std	Z+5, r19	; 0x05
     a06:	46 83       	std	Z+6, r20	; 0x06
     a08:	57 83       	std	Z+7, r21	; 0x07
     a0a:	1d c0       	rjmp	.+58     	; 0xa46 <_fpadd_parts+0x20e>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	81 83       	std	Z+1, r24	; 0x01
     a10:	33 82       	std	Z+3, r3	; 0x03
     a12:	22 82       	std	Z+2, r2	; 0x02
     a14:	88 27       	eor	r24, r24
     a16:	99 27       	eor	r25, r25
     a18:	dc 01       	movw	r26, r24
     a1a:	82 1b       	sub	r24, r18
     a1c:	93 0b       	sbc	r25, r19
     a1e:	a4 0b       	sbc	r26, r20
     a20:	b5 0b       	sbc	r27, r21
     a22:	84 83       	std	Z+4, r24	; 0x04
     a24:	95 83       	std	Z+5, r25	; 0x05
     a26:	a6 83       	std	Z+6, r26	; 0x06
     a28:	b7 83       	std	Z+7, r27	; 0x07
     a2a:	0d c0       	rjmp	.+26     	; 0xa46 <_fpadd_parts+0x20e>
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	44 1f       	adc	r20, r20
     a32:	55 1f       	adc	r21, r21
     a34:	24 83       	std	Z+4, r18	; 0x04
     a36:	35 83       	std	Z+5, r19	; 0x05
     a38:	46 83       	std	Z+6, r20	; 0x06
     a3a:	57 83       	std	Z+7, r21	; 0x07
     a3c:	82 81       	ldd	r24, Z+2	; 0x02
     a3e:	93 81       	ldd	r25, Z+3	; 0x03
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	93 83       	std	Z+3, r25	; 0x03
     a44:	82 83       	std	Z+2, r24	; 0x02
     a46:	24 81       	ldd	r18, Z+4	; 0x04
     a48:	35 81       	ldd	r19, Z+5	; 0x05
     a4a:	46 81       	ldd	r20, Z+6	; 0x06
     a4c:	57 81       	ldd	r21, Z+7	; 0x07
     a4e:	da 01       	movw	r26, r20
     a50:	c9 01       	movw	r24, r18
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	a1 09       	sbc	r26, r1
     a56:	b1 09       	sbc	r27, r1
     a58:	8f 5f       	subi	r24, 0xFF	; 255
     a5a:	9f 4f       	sbci	r25, 0xFF	; 255
     a5c:	af 4f       	sbci	r26, 0xFF	; 255
     a5e:	bf 43       	sbci	r27, 0x3F	; 63
     a60:	28 f3       	brcs	.-54     	; 0xa2c <_fpadd_parts+0x1f4>
     a62:	0b c0       	rjmp	.+22     	; 0xa7a <_fpadd_parts+0x242>
     a64:	91 83       	std	Z+1, r25	; 0x01
     a66:	33 82       	std	Z+3, r3	; 0x03
     a68:	22 82       	std	Z+2, r2	; 0x02
     a6a:	ea 0c       	add	r14, r10
     a6c:	fb 1c       	adc	r15, r11
     a6e:	0c 1d       	adc	r16, r12
     a70:	1d 1d       	adc	r17, r13
     a72:	e4 82       	std	Z+4, r14	; 0x04
     a74:	f5 82       	std	Z+5, r15	; 0x05
     a76:	06 83       	std	Z+6, r16	; 0x06
     a78:	17 83       	std	Z+7, r17	; 0x07
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	80 83       	st	Z, r24
     a7e:	24 81       	ldd	r18, Z+4	; 0x04
     a80:	35 81       	ldd	r19, Z+5	; 0x05
     a82:	46 81       	ldd	r20, Z+6	; 0x06
     a84:	57 81       	ldd	r21, Z+7	; 0x07
     a86:	57 ff       	sbrs	r21, 7
     a88:	1a c0       	rjmp	.+52     	; 0xabe <_fpadd_parts+0x286>
     a8a:	c9 01       	movw	r24, r18
     a8c:	aa 27       	eor	r26, r26
     a8e:	97 fd       	sbrc	r25, 7
     a90:	a0 95       	com	r26
     a92:	ba 2f       	mov	r27, r26
     a94:	81 70       	andi	r24, 0x01	; 1
     a96:	90 70       	andi	r25, 0x00	; 0
     a98:	a0 70       	andi	r26, 0x00	; 0
     a9a:	b0 70       	andi	r27, 0x00	; 0
     a9c:	56 95       	lsr	r21
     a9e:	47 95       	ror	r20
     aa0:	37 95       	ror	r19
     aa2:	27 95       	ror	r18
     aa4:	82 2b       	or	r24, r18
     aa6:	93 2b       	or	r25, r19
     aa8:	a4 2b       	or	r26, r20
     aaa:	b5 2b       	or	r27, r21
     aac:	84 83       	std	Z+4, r24	; 0x04
     aae:	95 83       	std	Z+5, r25	; 0x05
     ab0:	a6 83       	std	Z+6, r26	; 0x06
     ab2:	b7 83       	std	Z+7, r27	; 0x07
     ab4:	82 81       	ldd	r24, Z+2	; 0x02
     ab6:	93 81       	ldd	r25, Z+3	; 0x03
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	93 83       	std	Z+3, r25	; 0x03
     abc:	82 83       	std	Z+2, r24	; 0x02
     abe:	df 01       	movw	r26, r30
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <_fpadd_parts+0x28c>
     ac2:	d2 01       	movw	r26, r4
     ac4:	cd 01       	movw	r24, r26
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	e2 e1       	ldi	r30, 0x12	; 18
     acc:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__epilogue_restores__>

00000ad0 <__subsf3>:
     ad0:	a0 e2       	ldi	r26, 0x20	; 32
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	ee e6       	ldi	r30, 0x6E	; 110
     ad6:	f5 e0       	ldi	r31, 0x05	; 5
     ad8:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__prologue_saves__+0x18>
     adc:	69 83       	std	Y+1, r22	; 0x01
     ade:	7a 83       	std	Y+2, r23	; 0x02
     ae0:	8b 83       	std	Y+3, r24	; 0x03
     ae2:	9c 83       	std	Y+4, r25	; 0x04
     ae4:	2d 83       	std	Y+5, r18	; 0x05
     ae6:	3e 83       	std	Y+6, r19	; 0x06
     ae8:	4f 83       	std	Y+7, r20	; 0x07
     aea:	58 87       	std	Y+8, r21	; 0x08
     aec:	e9 e0       	ldi	r30, 0x09	; 9
     aee:	ee 2e       	mov	r14, r30
     af0:	f1 2c       	mov	r15, r1
     af2:	ec 0e       	add	r14, r28
     af4:	fd 1e       	adc	r15, r29
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	b7 01       	movw	r22, r14
     afc:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     b00:	8e 01       	movw	r16, r28
     b02:	0f 5e       	subi	r16, 0xEF	; 239
     b04:	1f 4f       	sbci	r17, 0xFF	; 255
     b06:	ce 01       	movw	r24, r28
     b08:	05 96       	adiw	r24, 0x05	; 5
     b0a:	b8 01       	movw	r22, r16
     b0c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     b10:	8a 89       	ldd	r24, Y+18	; 0x12
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	89 27       	eor	r24, r25
     b16:	8a 8b       	std	Y+18, r24	; 0x12
     b18:	c7 01       	movw	r24, r14
     b1a:	b8 01       	movw	r22, r16
     b1c:	ae 01       	movw	r20, r28
     b1e:	47 5e       	subi	r20, 0xE7	; 231
     b20:	5f 4f       	sbci	r21, 0xFF	; 255
     b22:	0e 94 1c 04 	call	0x838	; 0x838 <_fpadd_parts>
     b26:	0e 94 76 09 	call	0x12ec	; 0x12ec <__pack_f>
     b2a:	a0 96       	adiw	r28, 0x20	; 32
     b2c:	e6 e0       	ldi	r30, 0x06	; 6
     b2e:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__epilogue_restores__+0x18>

00000b32 <__addsf3>:
     b32:	a0 e2       	ldi	r26, 0x20	; 32
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	ef e9       	ldi	r30, 0x9F	; 159
     b38:	f5 e0       	ldi	r31, 0x05	; 5
     b3a:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__prologue_saves__+0x18>
     b3e:	69 83       	std	Y+1, r22	; 0x01
     b40:	7a 83       	std	Y+2, r23	; 0x02
     b42:	8b 83       	std	Y+3, r24	; 0x03
     b44:	9c 83       	std	Y+4, r25	; 0x04
     b46:	2d 83       	std	Y+5, r18	; 0x05
     b48:	3e 83       	std	Y+6, r19	; 0x06
     b4a:	4f 83       	std	Y+7, r20	; 0x07
     b4c:	58 87       	std	Y+8, r21	; 0x08
     b4e:	f9 e0       	ldi	r31, 0x09	; 9
     b50:	ef 2e       	mov	r14, r31
     b52:	f1 2c       	mov	r15, r1
     b54:	ec 0e       	add	r14, r28
     b56:	fd 1e       	adc	r15, r29
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	b7 01       	movw	r22, r14
     b5e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     b62:	8e 01       	movw	r16, r28
     b64:	0f 5e       	subi	r16, 0xEF	; 239
     b66:	1f 4f       	sbci	r17, 0xFF	; 255
     b68:	ce 01       	movw	r24, r28
     b6a:	05 96       	adiw	r24, 0x05	; 5
     b6c:	b8 01       	movw	r22, r16
     b6e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     b72:	c7 01       	movw	r24, r14
     b74:	b8 01       	movw	r22, r16
     b76:	ae 01       	movw	r20, r28
     b78:	47 5e       	subi	r20, 0xE7	; 231
     b7a:	5f 4f       	sbci	r21, 0xFF	; 255
     b7c:	0e 94 1c 04 	call	0x838	; 0x838 <_fpadd_parts>
     b80:	0e 94 76 09 	call	0x12ec	; 0x12ec <__pack_f>
     b84:	a0 96       	adiw	r28, 0x20	; 32
     b86:	e6 e0       	ldi	r30, 0x06	; 6
     b88:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__epilogue_restores__+0x18>

00000b8c <__mulsf3>:
     b8c:	a0 e2       	ldi	r26, 0x20	; 32
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	ec ec       	ldi	r30, 0xCC	; 204
     b92:	f5 e0       	ldi	r31, 0x05	; 5
     b94:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__prologue_saves__>
     b98:	69 83       	std	Y+1, r22	; 0x01
     b9a:	7a 83       	std	Y+2, r23	; 0x02
     b9c:	8b 83       	std	Y+3, r24	; 0x03
     b9e:	9c 83       	std	Y+4, r25	; 0x04
     ba0:	2d 83       	std	Y+5, r18	; 0x05
     ba2:	3e 83       	std	Y+6, r19	; 0x06
     ba4:	4f 83       	std	Y+7, r20	; 0x07
     ba6:	58 87       	std	Y+8, r21	; 0x08
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	be 01       	movw	r22, r28
     bae:	67 5f       	subi	r22, 0xF7	; 247
     bb0:	7f 4f       	sbci	r23, 0xFF	; 255
     bb2:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     bb6:	ce 01       	movw	r24, r28
     bb8:	05 96       	adiw	r24, 0x05	; 5
     bba:	be 01       	movw	r22, r28
     bbc:	6f 5e       	subi	r22, 0xEF	; 239
     bbe:	7f 4f       	sbci	r23, 0xFF	; 255
     bc0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     bc4:	99 85       	ldd	r25, Y+9	; 0x09
     bc6:	92 30       	cpi	r25, 0x02	; 2
     bc8:	88 f0       	brcs	.+34     	; 0xbec <__mulsf3+0x60>
     bca:	89 89       	ldd	r24, Y+17	; 0x11
     bcc:	82 30       	cpi	r24, 0x02	; 2
     bce:	c8 f0       	brcs	.+50     	; 0xc02 <__mulsf3+0x76>
     bd0:	94 30       	cpi	r25, 0x04	; 4
     bd2:	19 f4       	brne	.+6      	; 0xbda <__mulsf3+0x4e>
     bd4:	82 30       	cpi	r24, 0x02	; 2
     bd6:	51 f4       	brne	.+20     	; 0xbec <__mulsf3+0x60>
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <__mulsf3+0x56>
     bda:	84 30       	cpi	r24, 0x04	; 4
     bdc:	29 f4       	brne	.+10     	; 0xbe8 <__mulsf3+0x5c>
     bde:	92 30       	cpi	r25, 0x02	; 2
     be0:	81 f4       	brne	.+32     	; 0xc02 <__mulsf3+0x76>
     be2:	86 e0       	ldi	r24, 0x06	; 6
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	c6 c0       	rjmp	.+396    	; 0xd74 <__mulsf3+0x1e8>
     be8:	92 30       	cpi	r25, 0x02	; 2
     bea:	49 f4       	brne	.+18     	; 0xbfe <__mulsf3+0x72>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf0:	8a 89       	ldd	r24, Y+18	; 0x12
     bf2:	98 13       	cpse	r25, r24
     bf4:	21 e0       	ldi	r18, 0x01	; 1
     bf6:	2a 87       	std	Y+10, r18	; 0x0a
     bf8:	ce 01       	movw	r24, r28
     bfa:	09 96       	adiw	r24, 0x09	; 9
     bfc:	bb c0       	rjmp	.+374    	; 0xd74 <__mulsf3+0x1e8>
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	49 f4       	brne	.+18     	; 0xc14 <__mulsf3+0x88>
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	9a 85       	ldd	r25, Y+10	; 0x0a
     c06:	8a 89       	ldd	r24, Y+18	; 0x12
     c08:	98 13       	cpse	r25, r24
     c0a:	21 e0       	ldi	r18, 0x01	; 1
     c0c:	2a 8b       	std	Y+18, r18	; 0x12
     c0e:	ce 01       	movw	r24, r28
     c10:	41 96       	adiw	r24, 0x11	; 17
     c12:	b0 c0       	rjmp	.+352    	; 0xd74 <__mulsf3+0x1e8>
     c14:	2d 84       	ldd	r2, Y+13	; 0x0d
     c16:	3e 84       	ldd	r3, Y+14	; 0x0e
     c18:	4f 84       	ldd	r4, Y+15	; 0x0f
     c1a:	58 88       	ldd	r5, Y+16	; 0x10
     c1c:	6d 88       	ldd	r6, Y+21	; 0x15
     c1e:	7e 88       	ldd	r7, Y+22	; 0x16
     c20:	8f 88       	ldd	r8, Y+23	; 0x17
     c22:	98 8c       	ldd	r9, Y+24	; 0x18
     c24:	ee 24       	eor	r14, r14
     c26:	ff 24       	eor	r15, r15
     c28:	87 01       	movw	r16, r14
     c2a:	aa 24       	eor	r10, r10
     c2c:	bb 24       	eor	r11, r11
     c2e:	65 01       	movw	r12, r10
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	c1 01       	movw	r24, r2
     c3e:	81 70       	andi	r24, 0x01	; 1
     c40:	90 70       	andi	r25, 0x00	; 0
     c42:	89 2b       	or	r24, r25
     c44:	e9 f0       	breq	.+58     	; 0xc80 <__mulsf3+0xf4>
     c46:	e6 0c       	add	r14, r6
     c48:	f7 1c       	adc	r15, r7
     c4a:	08 1d       	adc	r16, r8
     c4c:	19 1d       	adc	r17, r9
     c4e:	9a 01       	movw	r18, r20
     c50:	ab 01       	movw	r20, r22
     c52:	2a 0d       	add	r18, r10
     c54:	3b 1d       	adc	r19, r11
     c56:	4c 1d       	adc	r20, r12
     c58:	5d 1d       	adc	r21, r13
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	a0 e0       	ldi	r26, 0x00	; 0
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e6 14       	cp	r14, r6
     c64:	f7 04       	cpc	r15, r7
     c66:	08 05       	cpc	r16, r8
     c68:	19 05       	cpc	r17, r9
     c6a:	20 f4       	brcc	.+8      	; 0xc74 <__mulsf3+0xe8>
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	a0 e0       	ldi	r26, 0x00	; 0
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	ba 01       	movw	r22, r20
     c76:	a9 01       	movw	r20, r18
     c78:	48 0f       	add	r20, r24
     c7a:	59 1f       	adc	r21, r25
     c7c:	6a 1f       	adc	r22, r26
     c7e:	7b 1f       	adc	r23, r27
     c80:	aa 0c       	add	r10, r10
     c82:	bb 1c       	adc	r11, r11
     c84:	cc 1c       	adc	r12, r12
     c86:	dd 1c       	adc	r13, r13
     c88:	97 fe       	sbrs	r9, 7
     c8a:	08 c0       	rjmp	.+16     	; 0xc9c <__mulsf3+0x110>
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	a0 e0       	ldi	r26, 0x00	; 0
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	a8 2a       	or	r10, r24
     c96:	b9 2a       	or	r11, r25
     c98:	ca 2a       	or	r12, r26
     c9a:	db 2a       	or	r13, r27
     c9c:	31 96       	adiw	r30, 0x01	; 1
     c9e:	e0 32       	cpi	r30, 0x20	; 32
     ca0:	f1 05       	cpc	r31, r1
     ca2:	49 f0       	breq	.+18     	; 0xcb6 <__mulsf3+0x12a>
     ca4:	66 0c       	add	r6, r6
     ca6:	77 1c       	adc	r7, r7
     ca8:	88 1c       	adc	r8, r8
     caa:	99 1c       	adc	r9, r9
     cac:	56 94       	lsr	r5
     cae:	47 94       	ror	r4
     cb0:	37 94       	ror	r3
     cb2:	27 94       	ror	r2
     cb4:	c3 cf       	rjmp	.-122    	; 0xc3c <__mulsf3+0xb0>
     cb6:	fa 85       	ldd	r31, Y+10	; 0x0a
     cb8:	ea 89       	ldd	r30, Y+18	; 0x12
     cba:	2b 89       	ldd	r18, Y+19	; 0x13
     cbc:	3c 89       	ldd	r19, Y+20	; 0x14
     cbe:	8b 85       	ldd	r24, Y+11	; 0x0b
     cc0:	9c 85       	ldd	r25, Y+12	; 0x0c
     cc2:	28 0f       	add	r18, r24
     cc4:	39 1f       	adc	r19, r25
     cc6:	2e 5f       	subi	r18, 0xFE	; 254
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	17 c0       	rjmp	.+46     	; 0xcfa <__mulsf3+0x16e>
     ccc:	ca 01       	movw	r24, r20
     cce:	81 70       	andi	r24, 0x01	; 1
     cd0:	90 70       	andi	r25, 0x00	; 0
     cd2:	89 2b       	or	r24, r25
     cd4:	61 f0       	breq	.+24     	; 0xcee <__mulsf3+0x162>
     cd6:	16 95       	lsr	r17
     cd8:	07 95       	ror	r16
     cda:	f7 94       	ror	r15
     cdc:	e7 94       	ror	r14
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	a0 e0       	ldi	r26, 0x00	; 0
     ce4:	b0 e8       	ldi	r27, 0x80	; 128
     ce6:	e8 2a       	or	r14, r24
     ce8:	f9 2a       	or	r15, r25
     cea:	0a 2b       	or	r16, r26
     cec:	1b 2b       	or	r17, r27
     cee:	76 95       	lsr	r23
     cf0:	67 95       	ror	r22
     cf2:	57 95       	ror	r21
     cf4:	47 95       	ror	r20
     cf6:	2f 5f       	subi	r18, 0xFF	; 255
     cf8:	3f 4f       	sbci	r19, 0xFF	; 255
     cfa:	77 fd       	sbrc	r23, 7
     cfc:	e7 cf       	rjmp	.-50     	; 0xccc <__mulsf3+0x140>
     cfe:	0c c0       	rjmp	.+24     	; 0xd18 <__mulsf3+0x18c>
     d00:	44 0f       	add	r20, r20
     d02:	55 1f       	adc	r21, r21
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	17 fd       	sbrc	r17, 7
     d0a:	41 60       	ori	r20, 0x01	; 1
     d0c:	ee 0c       	add	r14, r14
     d0e:	ff 1c       	adc	r15, r15
     d10:	00 1f       	adc	r16, r16
     d12:	11 1f       	adc	r17, r17
     d14:	21 50       	subi	r18, 0x01	; 1
     d16:	30 40       	sbci	r19, 0x00	; 0
     d18:	40 30       	cpi	r20, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	59 07       	cpc	r21, r25
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	69 07       	cpc	r22, r25
     d22:	90 e4       	ldi	r25, 0x40	; 64
     d24:	79 07       	cpc	r23, r25
     d26:	60 f3       	brcs	.-40     	; 0xd00 <__mulsf3+0x174>
     d28:	2b 8f       	std	Y+27, r18	; 0x1b
     d2a:	3c 8f       	std	Y+28, r19	; 0x1c
     d2c:	db 01       	movw	r26, r22
     d2e:	ca 01       	movw	r24, r20
     d30:	8f 77       	andi	r24, 0x7F	; 127
     d32:	90 70       	andi	r25, 0x00	; 0
     d34:	a0 70       	andi	r26, 0x00	; 0
     d36:	b0 70       	andi	r27, 0x00	; 0
     d38:	80 34       	cpi	r24, 0x40	; 64
     d3a:	91 05       	cpc	r25, r1
     d3c:	a1 05       	cpc	r26, r1
     d3e:	b1 05       	cpc	r27, r1
     d40:	61 f4       	brne	.+24     	; 0xd5a <__mulsf3+0x1ce>
     d42:	47 fd       	sbrc	r20, 7
     d44:	0a c0       	rjmp	.+20     	; 0xd5a <__mulsf3+0x1ce>
     d46:	e1 14       	cp	r14, r1
     d48:	f1 04       	cpc	r15, r1
     d4a:	01 05       	cpc	r16, r1
     d4c:	11 05       	cpc	r17, r1
     d4e:	29 f0       	breq	.+10     	; 0xd5a <__mulsf3+0x1ce>
     d50:	40 5c       	subi	r20, 0xC0	; 192
     d52:	5f 4f       	sbci	r21, 0xFF	; 255
     d54:	6f 4f       	sbci	r22, 0xFF	; 255
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	40 78       	andi	r20, 0x80	; 128
     d5a:	1a 8e       	std	Y+26, r1	; 0x1a
     d5c:	fe 17       	cp	r31, r30
     d5e:	11 f0       	breq	.+4      	; 0xd64 <__mulsf3+0x1d8>
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	8a 8f       	std	Y+26, r24	; 0x1a
     d64:	4d 8f       	std	Y+29, r20	; 0x1d
     d66:	5e 8f       	std	Y+30, r21	; 0x1e
     d68:	6f 8f       	std	Y+31, r22	; 0x1f
     d6a:	78 a3       	std	Y+32, r23	; 0x20
     d6c:	83 e0       	ldi	r24, 0x03	; 3
     d6e:	89 8f       	std	Y+25, r24	; 0x19
     d70:	ce 01       	movw	r24, r28
     d72:	49 96       	adiw	r24, 0x19	; 25
     d74:	0e 94 76 09 	call	0x12ec	; 0x12ec <__pack_f>
     d78:	a0 96       	adiw	r28, 0x20	; 32
     d7a:	e2 e1       	ldi	r30, 0x12	; 18
     d7c:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__epilogue_restores__>

00000d80 <__divsf3>:
     d80:	a8 e1       	ldi	r26, 0x18	; 24
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e6 ec       	ldi	r30, 0xC6	; 198
     d86:	f6 e0       	ldi	r31, 0x06	; 6
     d88:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__prologue_saves__+0x10>
     d8c:	69 83       	std	Y+1, r22	; 0x01
     d8e:	7a 83       	std	Y+2, r23	; 0x02
     d90:	8b 83       	std	Y+3, r24	; 0x03
     d92:	9c 83       	std	Y+4, r25	; 0x04
     d94:	2d 83       	std	Y+5, r18	; 0x05
     d96:	3e 83       	std	Y+6, r19	; 0x06
     d98:	4f 83       	std	Y+7, r20	; 0x07
     d9a:	58 87       	std	Y+8, r21	; 0x08
     d9c:	b9 e0       	ldi	r27, 0x09	; 9
     d9e:	eb 2e       	mov	r14, r27
     da0:	f1 2c       	mov	r15, r1
     da2:	ec 0e       	add	r14, r28
     da4:	fd 1e       	adc	r15, r29
     da6:	ce 01       	movw	r24, r28
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	b7 01       	movw	r22, r14
     dac:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     db0:	8e 01       	movw	r16, r28
     db2:	0f 5e       	subi	r16, 0xEF	; 239
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
     db6:	ce 01       	movw	r24, r28
     db8:	05 96       	adiw	r24, 0x05	; 5
     dba:	b8 01       	movw	r22, r16
     dbc:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     dc0:	29 85       	ldd	r18, Y+9	; 0x09
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	08 f4       	brcc	.+2      	; 0xdc8 <__divsf3+0x48>
     dc6:	7e c0       	rjmp	.+252    	; 0xec4 <__divsf3+0x144>
     dc8:	39 89       	ldd	r19, Y+17	; 0x11
     dca:	32 30       	cpi	r19, 0x02	; 2
     dcc:	10 f4       	brcc	.+4      	; 0xdd2 <__divsf3+0x52>
     dce:	b8 01       	movw	r22, r16
     dd0:	7c c0       	rjmp	.+248    	; 0xeca <__divsf3+0x14a>
     dd2:	8a 85       	ldd	r24, Y+10	; 0x0a
     dd4:	9a 89       	ldd	r25, Y+18	; 0x12
     dd6:	89 27       	eor	r24, r25
     dd8:	8a 87       	std	Y+10, r24	; 0x0a
     dda:	24 30       	cpi	r18, 0x04	; 4
     ddc:	11 f0       	breq	.+4      	; 0xde2 <__divsf3+0x62>
     dde:	22 30       	cpi	r18, 0x02	; 2
     de0:	31 f4       	brne	.+12     	; 0xdee <__divsf3+0x6e>
     de2:	23 17       	cp	r18, r19
     de4:	09 f0       	breq	.+2      	; 0xde8 <__divsf3+0x68>
     de6:	6e c0       	rjmp	.+220    	; 0xec4 <__divsf3+0x144>
     de8:	66 e0       	ldi	r22, 0x06	; 6
     dea:	71 e0       	ldi	r23, 0x01	; 1
     dec:	6e c0       	rjmp	.+220    	; 0xeca <__divsf3+0x14a>
     dee:	34 30       	cpi	r19, 0x04	; 4
     df0:	39 f4       	brne	.+14     	; 0xe00 <__divsf3+0x80>
     df2:	1d 86       	std	Y+13, r1	; 0x0d
     df4:	1e 86       	std	Y+14, r1	; 0x0e
     df6:	1f 86       	std	Y+15, r1	; 0x0f
     df8:	18 8a       	std	Y+16, r1	; 0x10
     dfa:	1c 86       	std	Y+12, r1	; 0x0c
     dfc:	1b 86       	std	Y+11, r1	; 0x0b
     dfe:	04 c0       	rjmp	.+8      	; 0xe08 <__divsf3+0x88>
     e00:	32 30       	cpi	r19, 0x02	; 2
     e02:	21 f4       	brne	.+8      	; 0xe0c <__divsf3+0x8c>
     e04:	84 e0       	ldi	r24, 0x04	; 4
     e06:	89 87       	std	Y+9, r24	; 0x09
     e08:	b7 01       	movw	r22, r14
     e0a:	5f c0       	rjmp	.+190    	; 0xeca <__divsf3+0x14a>
     e0c:	2b 85       	ldd	r18, Y+11	; 0x0b
     e0e:	3c 85       	ldd	r19, Y+12	; 0x0c
     e10:	8b 89       	ldd	r24, Y+19	; 0x13
     e12:	9c 89       	ldd	r25, Y+20	; 0x14
     e14:	28 1b       	sub	r18, r24
     e16:	39 0b       	sbc	r19, r25
     e18:	3c 87       	std	Y+12, r19	; 0x0c
     e1a:	2b 87       	std	Y+11, r18	; 0x0b
     e1c:	ed 84       	ldd	r14, Y+13	; 0x0d
     e1e:	fe 84       	ldd	r15, Y+14	; 0x0e
     e20:	0f 85       	ldd	r16, Y+15	; 0x0f
     e22:	18 89       	ldd	r17, Y+16	; 0x10
     e24:	ad 88       	ldd	r10, Y+21	; 0x15
     e26:	be 88       	ldd	r11, Y+22	; 0x16
     e28:	cf 88       	ldd	r12, Y+23	; 0x17
     e2a:	d8 8c       	ldd	r13, Y+24	; 0x18
     e2c:	ea 14       	cp	r14, r10
     e2e:	fb 04       	cpc	r15, r11
     e30:	0c 05       	cpc	r16, r12
     e32:	1d 05       	cpc	r17, r13
     e34:	40 f4       	brcc	.+16     	; 0xe46 <__divsf3+0xc6>
     e36:	ee 0c       	add	r14, r14
     e38:	ff 1c       	adc	r15, r15
     e3a:	00 1f       	adc	r16, r16
     e3c:	11 1f       	adc	r17, r17
     e3e:	21 50       	subi	r18, 0x01	; 1
     e40:	30 40       	sbci	r19, 0x00	; 0
     e42:	3c 87       	std	Y+12, r19	; 0x0c
     e44:	2b 87       	std	Y+11, r18	; 0x0b
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	a0 e0       	ldi	r26, 0x00	; 0
     e54:	b0 e4       	ldi	r27, 0x40	; 64
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	ea 14       	cp	r14, r10
     e5c:	fb 04       	cpc	r15, r11
     e5e:	0c 05       	cpc	r16, r12
     e60:	1d 05       	cpc	r17, r13
     e62:	40 f0       	brcs	.+16     	; 0xe74 <__divsf3+0xf4>
     e64:	28 2b       	or	r18, r24
     e66:	39 2b       	or	r19, r25
     e68:	4a 2b       	or	r20, r26
     e6a:	5b 2b       	or	r21, r27
     e6c:	ea 18       	sub	r14, r10
     e6e:	fb 08       	sbc	r15, r11
     e70:	0c 09       	sbc	r16, r12
     e72:	1d 09       	sbc	r17, r13
     e74:	b6 95       	lsr	r27
     e76:	a7 95       	ror	r26
     e78:	97 95       	ror	r25
     e7a:	87 95       	ror	r24
     e7c:	ee 0c       	add	r14, r14
     e7e:	ff 1c       	adc	r15, r15
     e80:	00 1f       	adc	r16, r16
     e82:	11 1f       	adc	r17, r17
     e84:	6f 5f       	subi	r22, 0xFF	; 255
     e86:	7f 4f       	sbci	r23, 0xFF	; 255
     e88:	6f 31       	cpi	r22, 0x1F	; 31
     e8a:	71 05       	cpc	r23, r1
     e8c:	31 f7       	brne	.-52     	; 0xe5a <__divsf3+0xda>
     e8e:	da 01       	movw	r26, r20
     e90:	c9 01       	movw	r24, r18
     e92:	8f 77       	andi	r24, 0x7F	; 127
     e94:	90 70       	andi	r25, 0x00	; 0
     e96:	a0 70       	andi	r26, 0x00	; 0
     e98:	b0 70       	andi	r27, 0x00	; 0
     e9a:	80 34       	cpi	r24, 0x40	; 64
     e9c:	91 05       	cpc	r25, r1
     e9e:	a1 05       	cpc	r26, r1
     ea0:	b1 05       	cpc	r27, r1
     ea2:	61 f4       	brne	.+24     	; 0xebc <__divsf3+0x13c>
     ea4:	27 fd       	sbrc	r18, 7
     ea6:	0a c0       	rjmp	.+20     	; 0xebc <__divsf3+0x13c>
     ea8:	e1 14       	cp	r14, r1
     eaa:	f1 04       	cpc	r15, r1
     eac:	01 05       	cpc	r16, r1
     eae:	11 05       	cpc	r17, r1
     eb0:	29 f0       	breq	.+10     	; 0xebc <__divsf3+0x13c>
     eb2:	20 5c       	subi	r18, 0xC0	; 192
     eb4:	3f 4f       	sbci	r19, 0xFF	; 255
     eb6:	4f 4f       	sbci	r20, 0xFF	; 255
     eb8:	5f 4f       	sbci	r21, 0xFF	; 255
     eba:	20 78       	andi	r18, 0x80	; 128
     ebc:	2d 87       	std	Y+13, r18	; 0x0d
     ebe:	3e 87       	std	Y+14, r19	; 0x0e
     ec0:	4f 87       	std	Y+15, r20	; 0x0f
     ec2:	58 8b       	std	Y+16, r21	; 0x10
     ec4:	be 01       	movw	r22, r28
     ec6:	67 5f       	subi	r22, 0xF7	; 247
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	cb 01       	movw	r24, r22
     ecc:	0e 94 76 09 	call	0x12ec	; 0x12ec <__pack_f>
     ed0:	68 96       	adiw	r28, 0x18	; 24
     ed2:	ea e0       	ldi	r30, 0x0A	; 10
     ed4:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__epilogue_restores__+0x10>

00000ed8 <__gtsf2>:
     ed8:	a8 e1       	ldi	r26, 0x18	; 24
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e2 e7       	ldi	r30, 0x72	; 114
     ede:	f7 e0       	ldi	r31, 0x07	; 7
     ee0:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__prologue_saves__+0x18>
     ee4:	69 83       	std	Y+1, r22	; 0x01
     ee6:	7a 83       	std	Y+2, r23	; 0x02
     ee8:	8b 83       	std	Y+3, r24	; 0x03
     eea:	9c 83       	std	Y+4, r25	; 0x04
     eec:	2d 83       	std	Y+5, r18	; 0x05
     eee:	3e 83       	std	Y+6, r19	; 0x06
     ef0:	4f 83       	std	Y+7, r20	; 0x07
     ef2:	58 87       	std	Y+8, r21	; 0x08
     ef4:	89 e0       	ldi	r24, 0x09	; 9
     ef6:	e8 2e       	mov	r14, r24
     ef8:	f1 2c       	mov	r15, r1
     efa:	ec 0e       	add	r14, r28
     efc:	fd 1e       	adc	r15, r29
     efe:	ce 01       	movw	r24, r28
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	b7 01       	movw	r22, r14
     f04:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     f08:	8e 01       	movw	r16, r28
     f0a:	0f 5e       	subi	r16, 0xEF	; 239
     f0c:	1f 4f       	sbci	r17, 0xFF	; 255
     f0e:	ce 01       	movw	r24, r28
     f10:	05 96       	adiw	r24, 0x05	; 5
     f12:	b8 01       	movw	r22, r16
     f14:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	40 f0       	brcs	.+16     	; 0xf2e <__gtsf2+0x56>
     f1e:	89 89       	ldd	r24, Y+17	; 0x11
     f20:	82 30       	cpi	r24, 0x02	; 2
     f22:	28 f0       	brcs	.+10     	; 0xf2e <__gtsf2+0x56>
     f24:	c7 01       	movw	r24, r14
     f26:	b8 01       	movw	r22, r16
     f28:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__fpcmp_parts_f>
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <__gtsf2+0x58>
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	68 96       	adiw	r28, 0x18	; 24
     f32:	e6 e0       	ldi	r30, 0x06	; 6
     f34:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__epilogue_restores__+0x18>

00000f38 <__ltsf2>:
     f38:	a8 e1       	ldi	r26, 0x18	; 24
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e2 ea       	ldi	r30, 0xA2	; 162
     f3e:	f7 e0       	ldi	r31, 0x07	; 7
     f40:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__prologue_saves__+0x18>
     f44:	69 83       	std	Y+1, r22	; 0x01
     f46:	7a 83       	std	Y+2, r23	; 0x02
     f48:	8b 83       	std	Y+3, r24	; 0x03
     f4a:	9c 83       	std	Y+4, r25	; 0x04
     f4c:	2d 83       	std	Y+5, r18	; 0x05
     f4e:	3e 83       	std	Y+6, r19	; 0x06
     f50:	4f 83       	std	Y+7, r20	; 0x07
     f52:	58 87       	std	Y+8, r21	; 0x08
     f54:	89 e0       	ldi	r24, 0x09	; 9
     f56:	e8 2e       	mov	r14, r24
     f58:	f1 2c       	mov	r15, r1
     f5a:	ec 0e       	add	r14, r28
     f5c:	fd 1e       	adc	r15, r29
     f5e:	ce 01       	movw	r24, r28
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	b7 01       	movw	r22, r14
     f64:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     f68:	8e 01       	movw	r16, r28
     f6a:	0f 5e       	subi	r16, 0xEF	; 239
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	ce 01       	movw	r24, r28
     f70:	05 96       	adiw	r24, 0x05	; 5
     f72:	b8 01       	movw	r22, r16
     f74:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     f78:	89 85       	ldd	r24, Y+9	; 0x09
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	40 f0       	brcs	.+16     	; 0xf8e <__ltsf2+0x56>
     f7e:	89 89       	ldd	r24, Y+17	; 0x11
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	28 f0       	brcs	.+10     	; 0xf8e <__ltsf2+0x56>
     f84:	c7 01       	movw	r24, r14
     f86:	b8 01       	movw	r22, r16
     f88:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__fpcmp_parts_f>
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <__ltsf2+0x58>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	68 96       	adiw	r28, 0x18	; 24
     f92:	e6 e0       	ldi	r30, 0x06	; 6
     f94:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__epilogue_restores__+0x18>

00000f98 <__lesf2>:
     f98:	a8 e1       	ldi	r26, 0x18	; 24
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e2 ed       	ldi	r30, 0xD2	; 210
     f9e:	f7 e0       	ldi	r31, 0x07	; 7
     fa0:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__prologue_saves__+0x18>
     fa4:	69 83       	std	Y+1, r22	; 0x01
     fa6:	7a 83       	std	Y+2, r23	; 0x02
     fa8:	8b 83       	std	Y+3, r24	; 0x03
     faa:	9c 83       	std	Y+4, r25	; 0x04
     fac:	2d 83       	std	Y+5, r18	; 0x05
     fae:	3e 83       	std	Y+6, r19	; 0x06
     fb0:	4f 83       	std	Y+7, r20	; 0x07
     fb2:	58 87       	std	Y+8, r21	; 0x08
     fb4:	89 e0       	ldi	r24, 0x09	; 9
     fb6:	e8 2e       	mov	r14, r24
     fb8:	f1 2c       	mov	r15, r1
     fba:	ec 0e       	add	r14, r28
     fbc:	fd 1e       	adc	r15, r29
     fbe:	ce 01       	movw	r24, r28
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	b7 01       	movw	r22, r14
     fc4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     fc8:	8e 01       	movw	r16, r28
     fca:	0f 5e       	subi	r16, 0xEF	; 239
     fcc:	1f 4f       	sbci	r17, 0xFF	; 255
     fce:	ce 01       	movw	r24, r28
     fd0:	05 96       	adiw	r24, 0x05	; 5
     fd2:	b8 01       	movw	r22, r16
     fd4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
     fd8:	89 85       	ldd	r24, Y+9	; 0x09
     fda:	82 30       	cpi	r24, 0x02	; 2
     fdc:	40 f0       	brcs	.+16     	; 0xfee <__lesf2+0x56>
     fde:	89 89       	ldd	r24, Y+17	; 0x11
     fe0:	82 30       	cpi	r24, 0x02	; 2
     fe2:	28 f0       	brcs	.+10     	; 0xfee <__lesf2+0x56>
     fe4:	c7 01       	movw	r24, r14
     fe6:	b8 01       	movw	r22, r16
     fe8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__fpcmp_parts_f>
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <__lesf2+0x58>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	68 96       	adiw	r28, 0x18	; 24
     ff2:	e6 e0       	ldi	r30, 0x06	; 6
     ff4:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__epilogue_restores__+0x18>

00000ff8 <__floatsisf>:
     ff8:	a8 e0       	ldi	r26, 0x08	; 8
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e2 e0       	ldi	r30, 0x02	; 2
     ffe:	f8 e0       	ldi	r31, 0x08	; 8
    1000:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__prologue_saves__+0x12>
    1004:	9b 01       	movw	r18, r22
    1006:	ac 01       	movw	r20, r24
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	da 01       	movw	r26, r20
    100e:	c9 01       	movw	r24, r18
    1010:	88 27       	eor	r24, r24
    1012:	b7 fd       	sbrc	r27, 7
    1014:	83 95       	inc	r24
    1016:	99 27       	eor	r25, r25
    1018:	aa 27       	eor	r26, r26
    101a:	bb 27       	eor	r27, r27
    101c:	b8 2e       	mov	r11, r24
    101e:	21 15       	cp	r18, r1
    1020:	31 05       	cpc	r19, r1
    1022:	41 05       	cpc	r20, r1
    1024:	51 05       	cpc	r21, r1
    1026:	19 f4       	brne	.+6      	; 0x102e <__floatsisf+0x36>
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	3a c0       	rjmp	.+116    	; 0x10a2 <__floatsisf+0xaa>
    102e:	88 23       	and	r24, r24
    1030:	a9 f0       	breq	.+42     	; 0x105c <__floatsisf+0x64>
    1032:	20 30       	cpi	r18, 0x00	; 0
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	38 07       	cpc	r19, r24
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	48 07       	cpc	r20, r24
    103c:	80 e8       	ldi	r24, 0x80	; 128
    103e:	58 07       	cpc	r21, r24
    1040:	29 f4       	brne	.+10     	; 0x104c <__floatsisf+0x54>
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	9f ec       	ldi	r25, 0xCF	; 207
    104a:	30 c0       	rjmp	.+96     	; 0x10ac <__floatsisf+0xb4>
    104c:	ee 24       	eor	r14, r14
    104e:	ff 24       	eor	r15, r15
    1050:	87 01       	movw	r16, r14
    1052:	e2 1a       	sub	r14, r18
    1054:	f3 0a       	sbc	r15, r19
    1056:	04 0b       	sbc	r16, r20
    1058:	15 0b       	sbc	r17, r21
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <__floatsisf+0x68>
    105c:	79 01       	movw	r14, r18
    105e:	8a 01       	movw	r16, r20
    1060:	8e e1       	ldi	r24, 0x1E	; 30
    1062:	c8 2e       	mov	r12, r24
    1064:	d1 2c       	mov	r13, r1
    1066:	dc 82       	std	Y+4, r13	; 0x04
    1068:	cb 82       	std	Y+3, r12	; 0x03
    106a:	ed 82       	std	Y+5, r14	; 0x05
    106c:	fe 82       	std	Y+6, r15	; 0x06
    106e:	0f 83       	std	Y+7, r16	; 0x07
    1070:	18 87       	std	Y+8, r17	; 0x08
    1072:	c8 01       	movw	r24, r16
    1074:	b7 01       	movw	r22, r14
    1076:	0e 94 27 09 	call	0x124e	; 0x124e <__clzsi2>
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	18 16       	cp	r1, r24
    107e:	19 06       	cpc	r1, r25
    1080:	84 f4       	brge	.+32     	; 0x10a2 <__floatsisf+0xaa>
    1082:	08 2e       	mov	r0, r24
    1084:	04 c0       	rjmp	.+8      	; 0x108e <__floatsisf+0x96>
    1086:	ee 0c       	add	r14, r14
    1088:	ff 1c       	adc	r15, r15
    108a:	00 1f       	adc	r16, r16
    108c:	11 1f       	adc	r17, r17
    108e:	0a 94       	dec	r0
    1090:	d2 f7       	brpl	.-12     	; 0x1086 <__floatsisf+0x8e>
    1092:	ed 82       	std	Y+5, r14	; 0x05
    1094:	fe 82       	std	Y+6, r15	; 0x06
    1096:	0f 83       	std	Y+7, r16	; 0x07
    1098:	18 87       	std	Y+8, r17	; 0x08
    109a:	c8 1a       	sub	r12, r24
    109c:	d9 0a       	sbc	r13, r25
    109e:	dc 82       	std	Y+4, r13	; 0x04
    10a0:	cb 82       	std	Y+3, r12	; 0x03
    10a2:	ba 82       	std	Y+2, r11	; 0x02
    10a4:	ce 01       	movw	r24, r28
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	0e 94 76 09 	call	0x12ec	; 0x12ec <__pack_f>
    10ac:	28 96       	adiw	r28, 0x08	; 8
    10ae:	e9 e0       	ldi	r30, 0x09	; 9
    10b0:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__epilogue_restores__+0x12>

000010b4 <__fixsfsi>:
    10b4:	ac e0       	ldi	r26, 0x0C	; 12
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e0 e6       	ldi	r30, 0x60	; 96
    10ba:	f8 e0       	ldi	r31, 0x08	; 8
    10bc:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <__prologue_saves__+0x20>
    10c0:	69 83       	std	Y+1, r22	; 0x01
    10c2:	7a 83       	std	Y+2, r23	; 0x02
    10c4:	8b 83       	std	Y+3, r24	; 0x03
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	ce 01       	movw	r24, r28
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	be 01       	movw	r22, r28
    10ce:	6b 5f       	subi	r22, 0xFB	; 251
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__unpack_f>
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	82 30       	cpi	r24, 0x02	; 2
    10da:	61 f1       	breq	.+88     	; 0x1134 <__fixsfsi+0x80>
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	50 f1       	brcs	.+84     	; 0x1134 <__fixsfsi+0x80>
    10e0:	84 30       	cpi	r24, 0x04	; 4
    10e2:	21 f4       	brne	.+8      	; 0x10ec <__fixsfsi+0x38>
    10e4:	8e 81       	ldd	r24, Y+6	; 0x06
    10e6:	88 23       	and	r24, r24
    10e8:	51 f1       	breq	.+84     	; 0x113e <__fixsfsi+0x8a>
    10ea:	2e c0       	rjmp	.+92     	; 0x1148 <__fixsfsi+0x94>
    10ec:	2f 81       	ldd	r18, Y+7	; 0x07
    10ee:	38 85       	ldd	r19, Y+8	; 0x08
    10f0:	37 fd       	sbrc	r19, 7
    10f2:	20 c0       	rjmp	.+64     	; 0x1134 <__fixsfsi+0x80>
    10f4:	6e 81       	ldd	r22, Y+6	; 0x06
    10f6:	2f 31       	cpi	r18, 0x1F	; 31
    10f8:	31 05       	cpc	r19, r1
    10fa:	1c f0       	brlt	.+6      	; 0x1102 <__fixsfsi+0x4e>
    10fc:	66 23       	and	r22, r22
    10fe:	f9 f0       	breq	.+62     	; 0x113e <__fixsfsi+0x8a>
    1100:	23 c0       	rjmp	.+70     	; 0x1148 <__fixsfsi+0x94>
    1102:	8e e1       	ldi	r24, 0x1E	; 30
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	82 1b       	sub	r24, r18
    1108:	93 0b       	sbc	r25, r19
    110a:	29 85       	ldd	r18, Y+9	; 0x09
    110c:	3a 85       	ldd	r19, Y+10	; 0x0a
    110e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1110:	5c 85       	ldd	r21, Y+12	; 0x0c
    1112:	04 c0       	rjmp	.+8      	; 0x111c <__fixsfsi+0x68>
    1114:	56 95       	lsr	r21
    1116:	47 95       	ror	r20
    1118:	37 95       	ror	r19
    111a:	27 95       	ror	r18
    111c:	8a 95       	dec	r24
    111e:	d2 f7       	brpl	.-12     	; 0x1114 <__fixsfsi+0x60>
    1120:	66 23       	and	r22, r22
    1122:	b1 f0       	breq	.+44     	; 0x1150 <__fixsfsi+0x9c>
    1124:	50 95       	com	r21
    1126:	40 95       	com	r20
    1128:	30 95       	com	r19
    112a:	21 95       	neg	r18
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	4f 4f       	sbci	r20, 0xFF	; 255
    1130:	5f 4f       	sbci	r21, 0xFF	; 255
    1132:	0e c0       	rjmp	.+28     	; 0x1150 <__fixsfsi+0x9c>
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	09 c0       	rjmp	.+18     	; 0x1150 <__fixsfsi+0x9c>
    113e:	2f ef       	ldi	r18, 0xFF	; 255
    1140:	3f ef       	ldi	r19, 0xFF	; 255
    1142:	4f ef       	ldi	r20, 0xFF	; 255
    1144:	5f e7       	ldi	r21, 0x7F	; 127
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <__fixsfsi+0x9c>
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	50 e8       	ldi	r21, 0x80	; 128
    1150:	b9 01       	movw	r22, r18
    1152:	ca 01       	movw	r24, r20
    1154:	2c 96       	adiw	r28, 0x0c	; 12
    1156:	e2 e0       	ldi	r30, 0x02	; 2
    1158:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__epilogue_restores__+0x20>

0000115c <__floatunsisf>:
    115c:	a8 e0       	ldi	r26, 0x08	; 8
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e4 eb       	ldi	r30, 0xB4	; 180
    1162:	f8 e0       	ldi	r31, 0x08	; 8
    1164:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__prologue_saves__+0x10>
    1168:	7b 01       	movw	r14, r22
    116a:	8c 01       	movw	r16, r24
    116c:	61 15       	cp	r22, r1
    116e:	71 05       	cpc	r23, r1
    1170:	81 05       	cpc	r24, r1
    1172:	91 05       	cpc	r25, r1
    1174:	19 f4       	brne	.+6      	; 0x117c <__floatunsisf+0x20>
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	60 c0       	rjmp	.+192    	; 0x123c <__floatunsisf+0xe0>
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	8e e1       	ldi	r24, 0x1E	; 30
    1182:	c8 2e       	mov	r12, r24
    1184:	d1 2c       	mov	r13, r1
    1186:	dc 82       	std	Y+4, r13	; 0x04
    1188:	cb 82       	std	Y+3, r12	; 0x03
    118a:	ed 82       	std	Y+5, r14	; 0x05
    118c:	fe 82       	std	Y+6, r15	; 0x06
    118e:	0f 83       	std	Y+7, r16	; 0x07
    1190:	18 87       	std	Y+8, r17	; 0x08
    1192:	c8 01       	movw	r24, r16
    1194:	b7 01       	movw	r22, r14
    1196:	0e 94 27 09 	call	0x124e	; 0x124e <__clzsi2>
    119a:	fc 01       	movw	r30, r24
    119c:	31 97       	sbiw	r30, 0x01	; 1
    119e:	f7 ff       	sbrs	r31, 7
    11a0:	3b c0       	rjmp	.+118    	; 0x1218 <__floatunsisf+0xbc>
    11a2:	22 27       	eor	r18, r18
    11a4:	33 27       	eor	r19, r19
    11a6:	2e 1b       	sub	r18, r30
    11a8:	3f 0b       	sbc	r19, r31
    11aa:	57 01       	movw	r10, r14
    11ac:	68 01       	movw	r12, r16
    11ae:	02 2e       	mov	r0, r18
    11b0:	04 c0       	rjmp	.+8      	; 0x11ba <__floatunsisf+0x5e>
    11b2:	d6 94       	lsr	r13
    11b4:	c7 94       	ror	r12
    11b6:	b7 94       	ror	r11
    11b8:	a7 94       	ror	r10
    11ba:	0a 94       	dec	r0
    11bc:	d2 f7       	brpl	.-12     	; 0x11b2 <__floatunsisf+0x56>
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a0 e0       	ldi	r26, 0x00	; 0
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <__floatunsisf+0x7c>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	aa 1f       	adc	r26, r26
    11d6:	bb 1f       	adc	r27, r27
    11d8:	2a 95       	dec	r18
    11da:	d2 f7       	brpl	.-12     	; 0x11d0 <__floatunsisf+0x74>
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	a1 09       	sbc	r26, r1
    11e0:	b1 09       	sbc	r27, r1
    11e2:	8e 21       	and	r24, r14
    11e4:	9f 21       	and	r25, r15
    11e6:	a0 23       	and	r26, r16
    11e8:	b1 23       	and	r27, r17
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	a1 05       	cpc	r26, r1
    11ee:	b1 05       	cpc	r27, r1
    11f0:	21 f0       	breq	.+8      	; 0x11fa <__floatunsisf+0x9e>
    11f2:	41 e0       	ldi	r20, 0x01	; 1
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	4a 29       	or	r20, r10
    11fc:	5b 29       	or	r21, r11
    11fe:	6c 29       	or	r22, r12
    1200:	7d 29       	or	r23, r13
    1202:	4d 83       	std	Y+5, r20	; 0x05
    1204:	5e 83       	std	Y+6, r21	; 0x06
    1206:	6f 83       	std	Y+7, r22	; 0x07
    1208:	78 87       	std	Y+8, r23	; 0x08
    120a:	8e e1       	ldi	r24, 0x1E	; 30
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	8e 1b       	sub	r24, r30
    1210:	9f 0b       	sbc	r25, r31
    1212:	9c 83       	std	Y+4, r25	; 0x04
    1214:	8b 83       	std	Y+3, r24	; 0x03
    1216:	12 c0       	rjmp	.+36     	; 0x123c <__floatunsisf+0xe0>
    1218:	30 97       	sbiw	r30, 0x00	; 0
    121a:	81 f0       	breq	.+32     	; 0x123c <__floatunsisf+0xe0>
    121c:	0e 2e       	mov	r0, r30
    121e:	04 c0       	rjmp	.+8      	; 0x1228 <__floatunsisf+0xcc>
    1220:	ee 0c       	add	r14, r14
    1222:	ff 1c       	adc	r15, r15
    1224:	00 1f       	adc	r16, r16
    1226:	11 1f       	adc	r17, r17
    1228:	0a 94       	dec	r0
    122a:	d2 f7       	brpl	.-12     	; 0x1220 <__floatunsisf+0xc4>
    122c:	ed 82       	std	Y+5, r14	; 0x05
    122e:	fe 82       	std	Y+6, r15	; 0x06
    1230:	0f 83       	std	Y+7, r16	; 0x07
    1232:	18 87       	std	Y+8, r17	; 0x08
    1234:	ce 1a       	sub	r12, r30
    1236:	df 0a       	sbc	r13, r31
    1238:	dc 82       	std	Y+4, r13	; 0x04
    123a:	cb 82       	std	Y+3, r12	; 0x03
    123c:	1a 82       	std	Y+2, r1	; 0x02
    123e:	ce 01       	movw	r24, r28
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	0e 94 76 09 	call	0x12ec	; 0x12ec <__pack_f>
    1246:	28 96       	adiw	r28, 0x08	; 8
    1248:	ea e0       	ldi	r30, 0x0A	; 10
    124a:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__epilogue_restores__+0x10>

0000124e <__clzsi2>:
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	7b 01       	movw	r14, r22
    1258:	8c 01       	movw	r16, r24
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	e8 16       	cp	r14, r24
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	f8 06       	cpc	r15, r24
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	08 07       	cpc	r16, r24
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	18 07       	cpc	r17, r24
    126a:	88 f4       	brcc	.+34     	; 0x128e <__clzsi2+0x40>
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	e8 16       	cp	r14, r24
    1270:	f1 04       	cpc	r15, r1
    1272:	01 05       	cpc	r16, r1
    1274:	11 05       	cpc	r17, r1
    1276:	31 f0       	breq	.+12     	; 0x1284 <__clzsi2+0x36>
    1278:	28 f0       	brcs	.+10     	; 0x1284 <__clzsi2+0x36>
    127a:	88 e0       	ldi	r24, 0x08	; 8
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	17 c0       	rjmp	.+46     	; 0x12b2 <__clzsi2+0x64>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a0 e0       	ldi	r26, 0x00	; 0
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	12 c0       	rjmp	.+36     	; 0x12b2 <__clzsi2+0x64>
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	e8 16       	cp	r14, r24
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	f8 06       	cpc	r15, r24
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	08 07       	cpc	r16, r24
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	18 07       	cpc	r17, r24
    129e:	28 f0       	brcs	.+10     	; 0x12aa <__clzsi2+0x5c>
    12a0:	88 e1       	ldi	r24, 0x18	; 24
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	a0 e0       	ldi	r26, 0x00	; 0
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	04 c0       	rjmp	.+8      	; 0x12b2 <__clzsi2+0x64>
    12aa:	80 e1       	ldi	r24, 0x10	; 16
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a0 e0       	ldi	r26, 0x00	; 0
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	20 e2       	ldi	r18, 0x20	; 32
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	28 1b       	sub	r18, r24
    12bc:	39 0b       	sbc	r19, r25
    12be:	4a 0b       	sbc	r20, r26
    12c0:	5b 0b       	sbc	r21, r27
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <__clzsi2+0x7e>
    12c4:	16 95       	lsr	r17
    12c6:	07 95       	ror	r16
    12c8:	f7 94       	ror	r15
    12ca:	e7 94       	ror	r14
    12cc:	8a 95       	dec	r24
    12ce:	d2 f7       	brpl	.-12     	; 0x12c4 <__clzsi2+0x76>
    12d0:	f7 01       	movw	r30, r14
    12d2:	e2 5f       	subi	r30, 0xF2	; 242
    12d4:	fe 4f       	sbci	r31, 0xFE	; 254
    12d6:	80 81       	ld	r24, Z
    12d8:	28 1b       	sub	r18, r24
    12da:	31 09       	sbc	r19, r1
    12dc:	41 09       	sbc	r20, r1
    12de:	51 09       	sbc	r21, r1
    12e0:	c9 01       	movw	r24, r18
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	ff 90       	pop	r15
    12e8:	ef 90       	pop	r14
    12ea:	08 95       	ret

000012ec <__pack_f>:
    12ec:	df 92       	push	r13
    12ee:	ef 92       	push	r14
    12f0:	ff 92       	push	r15
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	fc 01       	movw	r30, r24
    12f8:	e4 80       	ldd	r14, Z+4	; 0x04
    12fa:	f5 80       	ldd	r15, Z+5	; 0x05
    12fc:	06 81       	ldd	r16, Z+6	; 0x06
    12fe:	17 81       	ldd	r17, Z+7	; 0x07
    1300:	d1 80       	ldd	r13, Z+1	; 0x01
    1302:	80 81       	ld	r24, Z
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	48 f4       	brcc	.+18     	; 0x131a <__pack_f+0x2e>
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a0 e1       	ldi	r26, 0x10	; 16
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e8 2a       	or	r14, r24
    1312:	f9 2a       	or	r15, r25
    1314:	0a 2b       	or	r16, r26
    1316:	1b 2b       	or	r17, r27
    1318:	a5 c0       	rjmp	.+330    	; 0x1464 <__pack_f+0x178>
    131a:	84 30       	cpi	r24, 0x04	; 4
    131c:	09 f4       	brne	.+2      	; 0x1320 <__pack_f+0x34>
    131e:	9f c0       	rjmp	.+318    	; 0x145e <__pack_f+0x172>
    1320:	82 30       	cpi	r24, 0x02	; 2
    1322:	21 f4       	brne	.+8      	; 0x132c <__pack_f+0x40>
    1324:	ee 24       	eor	r14, r14
    1326:	ff 24       	eor	r15, r15
    1328:	87 01       	movw	r16, r14
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <__pack_f+0x4a>
    132c:	e1 14       	cp	r14, r1
    132e:	f1 04       	cpc	r15, r1
    1330:	01 05       	cpc	r16, r1
    1332:	11 05       	cpc	r17, r1
    1334:	19 f4       	brne	.+6      	; 0x133c <__pack_f+0x50>
    1336:	e0 e0       	ldi	r30, 0x00	; 0
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	96 c0       	rjmp	.+300    	; 0x1468 <__pack_f+0x17c>
    133c:	62 81       	ldd	r22, Z+2	; 0x02
    133e:	73 81       	ldd	r23, Z+3	; 0x03
    1340:	9f ef       	ldi	r25, 0xFF	; 255
    1342:	62 38       	cpi	r22, 0x82	; 130
    1344:	79 07       	cpc	r23, r25
    1346:	0c f0       	brlt	.+2      	; 0x134a <__pack_f+0x5e>
    1348:	5b c0       	rjmp	.+182    	; 0x1400 <__pack_f+0x114>
    134a:	22 e8       	ldi	r18, 0x82	; 130
    134c:	3f ef       	ldi	r19, 0xFF	; 255
    134e:	26 1b       	sub	r18, r22
    1350:	37 0b       	sbc	r19, r23
    1352:	2a 31       	cpi	r18, 0x1A	; 26
    1354:	31 05       	cpc	r19, r1
    1356:	2c f0       	brlt	.+10     	; 0x1362 <__pack_f+0x76>
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	2a c0       	rjmp	.+84     	; 0x13b6 <__pack_f+0xca>
    1362:	b8 01       	movw	r22, r16
    1364:	a7 01       	movw	r20, r14
    1366:	02 2e       	mov	r0, r18
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <__pack_f+0x86>
    136a:	76 95       	lsr	r23
    136c:	67 95       	ror	r22
    136e:	57 95       	ror	r21
    1370:	47 95       	ror	r20
    1372:	0a 94       	dec	r0
    1374:	d2 f7       	brpl	.-12     	; 0x136a <__pack_f+0x7e>
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a0 e0       	ldi	r26, 0x00	; 0
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	04 c0       	rjmp	.+8      	; 0x1388 <__pack_f+0x9c>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	aa 1f       	adc	r26, r26
    1386:	bb 1f       	adc	r27, r27
    1388:	2a 95       	dec	r18
    138a:	d2 f7       	brpl	.-12     	; 0x1380 <__pack_f+0x94>
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	a1 09       	sbc	r26, r1
    1390:	b1 09       	sbc	r27, r1
    1392:	8e 21       	and	r24, r14
    1394:	9f 21       	and	r25, r15
    1396:	a0 23       	and	r26, r16
    1398:	b1 23       	and	r27, r17
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	a1 05       	cpc	r26, r1
    139e:	b1 05       	cpc	r27, r1
    13a0:	21 f0       	breq	.+8      	; 0x13aa <__pack_f+0xbe>
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a0 e0       	ldi	r26, 0x00	; 0
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	9a 01       	movw	r18, r20
    13ac:	ab 01       	movw	r20, r22
    13ae:	28 2b       	or	r18, r24
    13b0:	39 2b       	or	r19, r25
    13b2:	4a 2b       	or	r20, r26
    13b4:	5b 2b       	or	r21, r27
    13b6:	da 01       	movw	r26, r20
    13b8:	c9 01       	movw	r24, r18
    13ba:	8f 77       	andi	r24, 0x7F	; 127
    13bc:	90 70       	andi	r25, 0x00	; 0
    13be:	a0 70       	andi	r26, 0x00	; 0
    13c0:	b0 70       	andi	r27, 0x00	; 0
    13c2:	80 34       	cpi	r24, 0x40	; 64
    13c4:	91 05       	cpc	r25, r1
    13c6:	a1 05       	cpc	r26, r1
    13c8:	b1 05       	cpc	r27, r1
    13ca:	39 f4       	brne	.+14     	; 0x13da <__pack_f+0xee>
    13cc:	27 ff       	sbrs	r18, 7
    13ce:	09 c0       	rjmp	.+18     	; 0x13e2 <__pack_f+0xf6>
    13d0:	20 5c       	subi	r18, 0xC0	; 192
    13d2:	3f 4f       	sbci	r19, 0xFF	; 255
    13d4:	4f 4f       	sbci	r20, 0xFF	; 255
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <__pack_f+0xf6>
    13da:	21 5c       	subi	r18, 0xC1	; 193
    13dc:	3f 4f       	sbci	r19, 0xFF	; 255
    13de:	4f 4f       	sbci	r20, 0xFF	; 255
    13e0:	5f 4f       	sbci	r21, 0xFF	; 255
    13e2:	e0 e0       	ldi	r30, 0x00	; 0
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	20 30       	cpi	r18, 0x00	; 0
    13e8:	a0 e0       	ldi	r26, 0x00	; 0
    13ea:	3a 07       	cpc	r19, r26
    13ec:	a0 e0       	ldi	r26, 0x00	; 0
    13ee:	4a 07       	cpc	r20, r26
    13f0:	a0 e4       	ldi	r26, 0x40	; 64
    13f2:	5a 07       	cpc	r21, r26
    13f4:	10 f0       	brcs	.+4      	; 0x13fa <__pack_f+0x10e>
    13f6:	e1 e0       	ldi	r30, 0x01	; 1
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	79 01       	movw	r14, r18
    13fc:	8a 01       	movw	r16, r20
    13fe:	27 c0       	rjmp	.+78     	; 0x144e <__pack_f+0x162>
    1400:	60 38       	cpi	r22, 0x80	; 128
    1402:	71 05       	cpc	r23, r1
    1404:	64 f5       	brge	.+88     	; 0x145e <__pack_f+0x172>
    1406:	fb 01       	movw	r30, r22
    1408:	e1 58       	subi	r30, 0x81	; 129
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	d8 01       	movw	r26, r16
    140e:	c7 01       	movw	r24, r14
    1410:	8f 77       	andi	r24, 0x7F	; 127
    1412:	90 70       	andi	r25, 0x00	; 0
    1414:	a0 70       	andi	r26, 0x00	; 0
    1416:	b0 70       	andi	r27, 0x00	; 0
    1418:	80 34       	cpi	r24, 0x40	; 64
    141a:	91 05       	cpc	r25, r1
    141c:	a1 05       	cpc	r26, r1
    141e:	b1 05       	cpc	r27, r1
    1420:	39 f4       	brne	.+14     	; 0x1430 <__pack_f+0x144>
    1422:	e7 fe       	sbrs	r14, 7
    1424:	0d c0       	rjmp	.+26     	; 0x1440 <__pack_f+0x154>
    1426:	80 e4       	ldi	r24, 0x40	; 64
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a0 e0       	ldi	r26, 0x00	; 0
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <__pack_f+0x14c>
    1430:	8f e3       	ldi	r24, 0x3F	; 63
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a0 e0       	ldi	r26, 0x00	; 0
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e8 0e       	add	r14, r24
    143a:	f9 1e       	adc	r15, r25
    143c:	0a 1f       	adc	r16, r26
    143e:	1b 1f       	adc	r17, r27
    1440:	17 ff       	sbrs	r17, 7
    1442:	05 c0       	rjmp	.+10     	; 0x144e <__pack_f+0x162>
    1444:	16 95       	lsr	r17
    1446:	07 95       	ror	r16
    1448:	f7 94       	ror	r15
    144a:	e7 94       	ror	r14
    144c:	31 96       	adiw	r30, 0x01	; 1
    144e:	87 e0       	ldi	r24, 0x07	; 7
    1450:	16 95       	lsr	r17
    1452:	07 95       	ror	r16
    1454:	f7 94       	ror	r15
    1456:	e7 94       	ror	r14
    1458:	8a 95       	dec	r24
    145a:	d1 f7       	brne	.-12     	; 0x1450 <__pack_f+0x164>
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <__pack_f+0x17c>
    145e:	ee 24       	eor	r14, r14
    1460:	ff 24       	eor	r15, r15
    1462:	87 01       	movw	r16, r14
    1464:	ef ef       	ldi	r30, 0xFF	; 255
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	6e 2f       	mov	r22, r30
    146a:	67 95       	ror	r22
    146c:	66 27       	eor	r22, r22
    146e:	67 95       	ror	r22
    1470:	90 2f       	mov	r25, r16
    1472:	9f 77       	andi	r25, 0x7F	; 127
    1474:	d7 94       	ror	r13
    1476:	dd 24       	eor	r13, r13
    1478:	d7 94       	ror	r13
    147a:	8e 2f       	mov	r24, r30
    147c:	86 95       	lsr	r24
    147e:	49 2f       	mov	r20, r25
    1480:	46 2b       	or	r20, r22
    1482:	58 2f       	mov	r21, r24
    1484:	5d 29       	or	r21, r13
    1486:	b7 01       	movw	r22, r14
    1488:	ca 01       	movw	r24, r20
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	df 90       	pop	r13
    1494:	08 95       	ret

00001496 <__unpack_f>:
    1496:	fc 01       	movw	r30, r24
    1498:	db 01       	movw	r26, r22
    149a:	40 81       	ld	r20, Z
    149c:	51 81       	ldd	r21, Z+1	; 0x01
    149e:	22 81       	ldd	r18, Z+2	; 0x02
    14a0:	62 2f       	mov	r22, r18
    14a2:	6f 77       	andi	r22, 0x7F	; 127
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	22 1f       	adc	r18, r18
    14a8:	22 27       	eor	r18, r18
    14aa:	22 1f       	adc	r18, r18
    14ac:	93 81       	ldd	r25, Z+3	; 0x03
    14ae:	89 2f       	mov	r24, r25
    14b0:	88 0f       	add	r24, r24
    14b2:	82 2b       	or	r24, r18
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	99 1f       	adc	r25, r25
    14ba:	99 27       	eor	r25, r25
    14bc:	99 1f       	adc	r25, r25
    14be:	11 96       	adiw	r26, 0x01	; 1
    14c0:	9c 93       	st	X, r25
    14c2:	11 97       	sbiw	r26, 0x01	; 1
    14c4:	21 15       	cp	r18, r1
    14c6:	31 05       	cpc	r19, r1
    14c8:	a9 f5       	brne	.+106    	; 0x1534 <__unpack_f+0x9e>
    14ca:	41 15       	cp	r20, r1
    14cc:	51 05       	cpc	r21, r1
    14ce:	61 05       	cpc	r22, r1
    14d0:	71 05       	cpc	r23, r1
    14d2:	11 f4       	brne	.+4      	; 0x14d8 <__unpack_f+0x42>
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	37 c0       	rjmp	.+110    	; 0x1546 <__unpack_f+0xb0>
    14d8:	82 e8       	ldi	r24, 0x82	; 130
    14da:	9f ef       	ldi	r25, 0xFF	; 255
    14dc:	13 96       	adiw	r26, 0x03	; 3
    14de:	9c 93       	st	X, r25
    14e0:	8e 93       	st	-X, r24
    14e2:	12 97       	sbiw	r26, 0x02	; 2
    14e4:	9a 01       	movw	r18, r20
    14e6:	ab 01       	movw	r20, r22
    14e8:	67 e0       	ldi	r22, 0x07	; 7
    14ea:	22 0f       	add	r18, r18
    14ec:	33 1f       	adc	r19, r19
    14ee:	44 1f       	adc	r20, r20
    14f0:	55 1f       	adc	r21, r21
    14f2:	6a 95       	dec	r22
    14f4:	d1 f7       	brne	.-12     	; 0x14ea <__unpack_f+0x54>
    14f6:	83 e0       	ldi	r24, 0x03	; 3
    14f8:	8c 93       	st	X, r24
    14fa:	0d c0       	rjmp	.+26     	; 0x1516 <__unpack_f+0x80>
    14fc:	22 0f       	add	r18, r18
    14fe:	33 1f       	adc	r19, r19
    1500:	44 1f       	adc	r20, r20
    1502:	55 1f       	adc	r21, r21
    1504:	12 96       	adiw	r26, 0x02	; 2
    1506:	8d 91       	ld	r24, X+
    1508:	9c 91       	ld	r25, X
    150a:	13 97       	sbiw	r26, 0x03	; 3
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	13 96       	adiw	r26, 0x03	; 3
    1510:	9c 93       	st	X, r25
    1512:	8e 93       	st	-X, r24
    1514:	12 97       	sbiw	r26, 0x02	; 2
    1516:	20 30       	cpi	r18, 0x00	; 0
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	38 07       	cpc	r19, r24
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	48 07       	cpc	r20, r24
    1520:	80 e4       	ldi	r24, 0x40	; 64
    1522:	58 07       	cpc	r21, r24
    1524:	58 f3       	brcs	.-42     	; 0x14fc <__unpack_f+0x66>
    1526:	14 96       	adiw	r26, 0x04	; 4
    1528:	2d 93       	st	X+, r18
    152a:	3d 93       	st	X+, r19
    152c:	4d 93       	st	X+, r20
    152e:	5c 93       	st	X, r21
    1530:	17 97       	sbiw	r26, 0x07	; 7
    1532:	08 95       	ret
    1534:	2f 3f       	cpi	r18, 0xFF	; 255
    1536:	31 05       	cpc	r19, r1
    1538:	79 f4       	brne	.+30     	; 0x1558 <__unpack_f+0xc2>
    153a:	41 15       	cp	r20, r1
    153c:	51 05       	cpc	r21, r1
    153e:	61 05       	cpc	r22, r1
    1540:	71 05       	cpc	r23, r1
    1542:	19 f4       	brne	.+6      	; 0x154a <__unpack_f+0xb4>
    1544:	84 e0       	ldi	r24, 0x04	; 4
    1546:	8c 93       	st	X, r24
    1548:	08 95       	ret
    154a:	64 ff       	sbrs	r22, 4
    154c:	03 c0       	rjmp	.+6      	; 0x1554 <__unpack_f+0xbe>
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	8c 93       	st	X, r24
    1552:	12 c0       	rjmp	.+36     	; 0x1578 <__unpack_f+0xe2>
    1554:	1c 92       	st	X, r1
    1556:	10 c0       	rjmp	.+32     	; 0x1578 <__unpack_f+0xe2>
    1558:	2f 57       	subi	r18, 0x7F	; 127
    155a:	30 40       	sbci	r19, 0x00	; 0
    155c:	13 96       	adiw	r26, 0x03	; 3
    155e:	3c 93       	st	X, r19
    1560:	2e 93       	st	-X, r18
    1562:	12 97       	sbiw	r26, 0x02	; 2
    1564:	83 e0       	ldi	r24, 0x03	; 3
    1566:	8c 93       	st	X, r24
    1568:	87 e0       	ldi	r24, 0x07	; 7
    156a:	44 0f       	add	r20, r20
    156c:	55 1f       	adc	r21, r21
    156e:	66 1f       	adc	r22, r22
    1570:	77 1f       	adc	r23, r23
    1572:	8a 95       	dec	r24
    1574:	d1 f7       	brne	.-12     	; 0x156a <__unpack_f+0xd4>
    1576:	70 64       	ori	r23, 0x40	; 64
    1578:	14 96       	adiw	r26, 0x04	; 4
    157a:	4d 93       	st	X+, r20
    157c:	5d 93       	st	X+, r21
    157e:	6d 93       	st	X+, r22
    1580:	7c 93       	st	X, r23
    1582:	17 97       	sbiw	r26, 0x07	; 7
    1584:	08 95       	ret

00001586 <__fpcmp_parts_f>:
    1586:	1f 93       	push	r17
    1588:	dc 01       	movw	r26, r24
    158a:	fb 01       	movw	r30, r22
    158c:	9c 91       	ld	r25, X
    158e:	92 30       	cpi	r25, 0x02	; 2
    1590:	08 f4       	brcc	.+2      	; 0x1594 <__fpcmp_parts_f+0xe>
    1592:	47 c0       	rjmp	.+142    	; 0x1622 <__fpcmp_parts_f+0x9c>
    1594:	80 81       	ld	r24, Z
    1596:	82 30       	cpi	r24, 0x02	; 2
    1598:	08 f4       	brcc	.+2      	; 0x159c <__fpcmp_parts_f+0x16>
    159a:	43 c0       	rjmp	.+134    	; 0x1622 <__fpcmp_parts_f+0x9c>
    159c:	94 30       	cpi	r25, 0x04	; 4
    159e:	51 f4       	brne	.+20     	; 0x15b4 <__fpcmp_parts_f+0x2e>
    15a0:	11 96       	adiw	r26, 0x01	; 1
    15a2:	1c 91       	ld	r17, X
    15a4:	84 30       	cpi	r24, 0x04	; 4
    15a6:	99 f5       	brne	.+102    	; 0x160e <__fpcmp_parts_f+0x88>
    15a8:	81 81       	ldd	r24, Z+1	; 0x01
    15aa:	68 2f       	mov	r22, r24
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	61 1b       	sub	r22, r17
    15b0:	71 09       	sbc	r23, r1
    15b2:	3f c0       	rjmp	.+126    	; 0x1632 <__fpcmp_parts_f+0xac>
    15b4:	84 30       	cpi	r24, 0x04	; 4
    15b6:	21 f0       	breq	.+8      	; 0x15c0 <__fpcmp_parts_f+0x3a>
    15b8:	92 30       	cpi	r25, 0x02	; 2
    15ba:	31 f4       	brne	.+12     	; 0x15c8 <__fpcmp_parts_f+0x42>
    15bc:	82 30       	cpi	r24, 0x02	; 2
    15be:	b9 f1       	breq	.+110    	; 0x162e <__fpcmp_parts_f+0xa8>
    15c0:	81 81       	ldd	r24, Z+1	; 0x01
    15c2:	88 23       	and	r24, r24
    15c4:	89 f1       	breq	.+98     	; 0x1628 <__fpcmp_parts_f+0xa2>
    15c6:	2d c0       	rjmp	.+90     	; 0x1622 <__fpcmp_parts_f+0x9c>
    15c8:	11 96       	adiw	r26, 0x01	; 1
    15ca:	1c 91       	ld	r17, X
    15cc:	11 97       	sbiw	r26, 0x01	; 1
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	f1 f0       	breq	.+60     	; 0x160e <__fpcmp_parts_f+0x88>
    15d2:	81 81       	ldd	r24, Z+1	; 0x01
    15d4:	18 17       	cp	r17, r24
    15d6:	d9 f4       	brne	.+54     	; 0x160e <__fpcmp_parts_f+0x88>
    15d8:	12 96       	adiw	r26, 0x02	; 2
    15da:	2d 91       	ld	r18, X+
    15dc:	3c 91       	ld	r19, X
    15de:	13 97       	sbiw	r26, 0x03	; 3
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	82 17       	cp	r24, r18
    15e6:	93 07       	cpc	r25, r19
    15e8:	94 f0       	brlt	.+36     	; 0x160e <__fpcmp_parts_f+0x88>
    15ea:	28 17       	cp	r18, r24
    15ec:	39 07       	cpc	r19, r25
    15ee:	bc f0       	brlt	.+46     	; 0x161e <__fpcmp_parts_f+0x98>
    15f0:	14 96       	adiw	r26, 0x04	; 4
    15f2:	8d 91       	ld	r24, X+
    15f4:	9d 91       	ld	r25, X+
    15f6:	0d 90       	ld	r0, X+
    15f8:	bc 91       	ld	r27, X
    15fa:	a0 2d       	mov	r26, r0
    15fc:	24 81       	ldd	r18, Z+4	; 0x04
    15fe:	35 81       	ldd	r19, Z+5	; 0x05
    1600:	46 81       	ldd	r20, Z+6	; 0x06
    1602:	57 81       	ldd	r21, Z+7	; 0x07
    1604:	28 17       	cp	r18, r24
    1606:	39 07       	cpc	r19, r25
    1608:	4a 07       	cpc	r20, r26
    160a:	5b 07       	cpc	r21, r27
    160c:	18 f4       	brcc	.+6      	; 0x1614 <__fpcmp_parts_f+0x8e>
    160e:	11 23       	and	r17, r17
    1610:	41 f0       	breq	.+16     	; 0x1622 <__fpcmp_parts_f+0x9c>
    1612:	0a c0       	rjmp	.+20     	; 0x1628 <__fpcmp_parts_f+0xa2>
    1614:	82 17       	cp	r24, r18
    1616:	93 07       	cpc	r25, r19
    1618:	a4 07       	cpc	r26, r20
    161a:	b5 07       	cpc	r27, r21
    161c:	40 f4       	brcc	.+16     	; 0x162e <__fpcmp_parts_f+0xa8>
    161e:	11 23       	and	r17, r17
    1620:	19 f0       	breq	.+6      	; 0x1628 <__fpcmp_parts_f+0xa2>
    1622:	61 e0       	ldi	r22, 0x01	; 1
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	05 c0       	rjmp	.+10     	; 0x1632 <__fpcmp_parts_f+0xac>
    1628:	6f ef       	ldi	r22, 0xFF	; 255
    162a:	7f ef       	ldi	r23, 0xFF	; 255
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <__fpcmp_parts_f+0xac>
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	cb 01       	movw	r24, r22
    1634:	1f 91       	pop	r17
    1636:	08 95       	ret

00001638 <__mulsi3>:
    1638:	62 9f       	mul	r22, r18
    163a:	d0 01       	movw	r26, r0
    163c:	73 9f       	mul	r23, r19
    163e:	f0 01       	movw	r30, r0
    1640:	82 9f       	mul	r24, r18
    1642:	e0 0d       	add	r30, r0
    1644:	f1 1d       	adc	r31, r1
    1646:	64 9f       	mul	r22, r20
    1648:	e0 0d       	add	r30, r0
    164a:	f1 1d       	adc	r31, r1
    164c:	92 9f       	mul	r25, r18
    164e:	f0 0d       	add	r31, r0
    1650:	83 9f       	mul	r24, r19
    1652:	f0 0d       	add	r31, r0
    1654:	74 9f       	mul	r23, r20
    1656:	f0 0d       	add	r31, r0
    1658:	65 9f       	mul	r22, r21
    165a:	f0 0d       	add	r31, r0
    165c:	99 27       	eor	r25, r25
    165e:	72 9f       	mul	r23, r18
    1660:	b0 0d       	add	r27, r0
    1662:	e1 1d       	adc	r30, r1
    1664:	f9 1f       	adc	r31, r25
    1666:	63 9f       	mul	r22, r19
    1668:	b0 0d       	add	r27, r0
    166a:	e1 1d       	adc	r30, r1
    166c:	f9 1f       	adc	r31, r25
    166e:	bd 01       	movw	r22, r26
    1670:	cf 01       	movw	r24, r30
    1672:	11 24       	eor	r1, r1
    1674:	08 95       	ret

00001676 <__divmodhi4>:
    1676:	97 fb       	bst	r25, 7
    1678:	09 2e       	mov	r0, r25
    167a:	07 26       	eor	r0, r23
    167c:	0a d0       	rcall	.+20     	; 0x1692 <__divmodhi4_neg1>
    167e:	77 fd       	sbrc	r23, 7
    1680:	04 d0       	rcall	.+8      	; 0x168a <__divmodhi4_neg2>
    1682:	0c d0       	rcall	.+24     	; 0x169c <__udivmodhi4>
    1684:	06 d0       	rcall	.+12     	; 0x1692 <__divmodhi4_neg1>
    1686:	00 20       	and	r0, r0
    1688:	1a f4       	brpl	.+6      	; 0x1690 <__divmodhi4_exit>

0000168a <__divmodhi4_neg2>:
    168a:	70 95       	com	r23
    168c:	61 95       	neg	r22
    168e:	7f 4f       	sbci	r23, 0xFF	; 255

00001690 <__divmodhi4_exit>:
    1690:	08 95       	ret

00001692 <__divmodhi4_neg1>:
    1692:	f6 f7       	brtc	.-4      	; 0x1690 <__divmodhi4_exit>
    1694:	90 95       	com	r25
    1696:	81 95       	neg	r24
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	08 95       	ret

0000169c <__udivmodhi4>:
    169c:	aa 1b       	sub	r26, r26
    169e:	bb 1b       	sub	r27, r27
    16a0:	51 e1       	ldi	r21, 0x11	; 17
    16a2:	07 c0       	rjmp	.+14     	; 0x16b2 <__udivmodhi4_ep>

000016a4 <__udivmodhi4_loop>:
    16a4:	aa 1f       	adc	r26, r26
    16a6:	bb 1f       	adc	r27, r27
    16a8:	a6 17       	cp	r26, r22
    16aa:	b7 07       	cpc	r27, r23
    16ac:	10 f0       	brcs	.+4      	; 0x16b2 <__udivmodhi4_ep>
    16ae:	a6 1b       	sub	r26, r22
    16b0:	b7 0b       	sbc	r27, r23

000016b2 <__udivmodhi4_ep>:
    16b2:	88 1f       	adc	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	5a 95       	dec	r21
    16b8:	a9 f7       	brne	.-22     	; 0x16a4 <__udivmodhi4_loop>
    16ba:	80 95       	com	r24
    16bc:	90 95       	com	r25
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	08 95       	ret

000016c4 <__prologue_saves__>:
    16c4:	2f 92       	push	r2
    16c6:	3f 92       	push	r3
    16c8:	4f 92       	push	r4
    16ca:	5f 92       	push	r5
    16cc:	6f 92       	push	r6
    16ce:	7f 92       	push	r7
    16d0:	8f 92       	push	r8
    16d2:	9f 92       	push	r9
    16d4:	af 92       	push	r10
    16d6:	bf 92       	push	r11
    16d8:	cf 92       	push	r12
    16da:	df 92       	push	r13
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	ca 1b       	sub	r28, r26
    16ee:	db 0b       	sbc	r29, r27
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	09 94       	ijmp

000016fc <__epilogue_restores__>:
    16fc:	2a 88       	ldd	r2, Y+18	; 0x12
    16fe:	39 88       	ldd	r3, Y+17	; 0x11
    1700:	48 88       	ldd	r4, Y+16	; 0x10
    1702:	5f 84       	ldd	r5, Y+15	; 0x0f
    1704:	6e 84       	ldd	r6, Y+14	; 0x0e
    1706:	7d 84       	ldd	r7, Y+13	; 0x0d
    1708:	8c 84       	ldd	r8, Y+12	; 0x0c
    170a:	9b 84       	ldd	r9, Y+11	; 0x0b
    170c:	aa 84       	ldd	r10, Y+10	; 0x0a
    170e:	b9 84       	ldd	r11, Y+9	; 0x09
    1710:	c8 84       	ldd	r12, Y+8	; 0x08
    1712:	df 80       	ldd	r13, Y+7	; 0x07
    1714:	ee 80       	ldd	r14, Y+6	; 0x06
    1716:	fd 80       	ldd	r15, Y+5	; 0x05
    1718:	0c 81       	ldd	r16, Y+4	; 0x04
    171a:	1b 81       	ldd	r17, Y+3	; 0x03
    171c:	aa 81       	ldd	r26, Y+2	; 0x02
    171e:	b9 81       	ldd	r27, Y+1	; 0x01
    1720:	ce 0f       	add	r28, r30
    1722:	d1 1d       	adc	r29, r1
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	ed 01       	movw	r28, r26
    1730:	08 95       	ret

00001732 <_exit>:
    1732:	f8 94       	cli

00001734 <__stop_program>:
    1734:	ff cf       	rjmp	.-2      	; 0x1734 <__stop_program>
